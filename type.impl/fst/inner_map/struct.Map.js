(function() {
    var type_impls = Object.fromEntries([["index",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CFst%3CD%3E%3E-for-Map%3CD%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CFst%3CD%3E%3E-for-Map%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;Fst&lt;D&gt;&gt; for Map&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h3><div class=\"docblock\"><p>Returns the underlying finite state transducer.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;Fst&lt;D&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Fst<D>>","index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Map%3CD%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Map%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Map&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Map&lt;D&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Map%3CD%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Map%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Map&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Map%3CVec%3Cu8%3E%3E\" class=\"impl\"><a href=\"#impl-Default-for-Map%3CVec%3Cu8%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Map&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Map&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CFst%3CD%3E%3E-for-Map%3CD%3E\" class=\"impl\"><a href=\"#impl-From%3CFst%3CD%3E%3E-for-Map%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Fst&lt;D&gt;&gt; for Map&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(fst: Fst&lt;D&gt;) -&gt; Map&lt;D&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Fst<D>>","index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3CD%3E\" class=\"impl\"><a href=\"#impl-Map%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; Map&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(data: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Map&lt;D&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a map from its representation as a raw byte sequence.</p>\n<p>This accepts anything that can be cheaply converted to a <code>&amp;[u8]</code>. The\ncaller is responsible for guaranteeing that the given bytes refer to\na valid FST. While memory safety will not be violated by invalid input,\na panic could occur while reading the FST at any point.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::Map;\n\n<span class=\"comment\">// File written from a build script using MapBuilder.\n</span><span class=\"kw\">static </span>FST: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"macro\">include_bytes!</span>(<span class=\"macro\">concat!</span>(<span class=\"macro\">env!</span>(<span class=\"string\">\"OUT_DIR\"</span>), <span class=\"string\">\"/map.fst\"</span>));\n\n<span class=\"kw\">let </span>map = Map::new(FST).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_key</a>&lt;K&gt;(&amp;self, key: K) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Tests the membership of a single key.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::Map;\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>)]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"string\">\"b\"</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"string\">\"z\"</span>), <span class=\"bool-val\">false</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;K&gt;(&amp;self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the value associated with a key.</p>\n<p>If the key does not exist, then <code>None</code> is returned.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::Map;\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>)]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"b\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"string\">\"z\"</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">stream</a>(&amp;self) -&gt; Stream&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return a lexicographically ordered stream of all key-value pairs in\nthis map.</p>\n<p>While this is a stream, it does require heap space proportional to the\nlongest key in the map.</p>\n<p>If the map is memory mapped, then no further heap space is needed.\nNote though that your operating system may fill your page cache\n(which will cause the resident memory usage of the process to go up\ncorrespondingly).</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<p>Since streams are not iterators, the traditional <code>for</code> loop cannot be\nused. <code>while let</code> is useful instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::{IntoStreamer, Streamer, Map};\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>)]).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = map.stream();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>kvs = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((k, v)) = stream.next() {\n    kvs.push((k.to_vec(), v));\n}\n<span class=\"macro\">assert_eq!</span>(kvs, <span class=\"macro\">vec!</span>[\n    (<span class=\"string\">b\"a\"</span>.to_vec(), <span class=\"number\">1</span>),\n    (<span class=\"string\">b\"b\"</span>.to_vec(), <span class=\"number\">2</span>),\n    (<span class=\"string\">b\"c\"</span>.to_vec(), <span class=\"number\">3</span>),\n]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">keys</a>(&amp;self) -&gt; Keys&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return a lexicographically ordered stream of all keys in this map.</p>\n<p>Memory requirements are the same as described on <code>Map::stream</code>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::{IntoStreamer, Streamer, Map};\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>)]).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = map.keys();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keys = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(k) = stream.next() {\n    keys.push(k.to_vec());\n}\n<span class=\"macro\">assert_eq!</span>(keys, <span class=\"macro\">vec!</span>[<span class=\"string\">b\"a\"</span>, <span class=\"string\">b\"b\"</span>, <span class=\"string\">b\"c\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">values</a>(&amp;self) -&gt; Values&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return a stream of all values in this map ordered lexicographically\nby each value’s corresponding key.</p>\n<p>Memory requirements are the same as described on <code>Map::stream</code>.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::{IntoStreamer, Streamer, Map};\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>)]).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = map.values();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(v) = stream.next() {\n    values.push(v);\n}\n<span class=\"macro\">assert_eq!</span>(values, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">range</a>(&amp;self) -&gt; StreamBuilder&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Return a builder for range queries.</p>\n<p>A range query returns a subset of key-value pairs in this map in a\nrange given in lexicographic order.</p>\n<p>Memory requirements are the same as described on <code>Map::stream</code>.\nNotably, only the keys in the range are read; keys outside the range\nare not.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<p>Returns only the key-value pairs in the range given.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::{IntoStreamer, Streamer, Map};\n\n<span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>), (<span class=\"string\">\"d\"</span>, <span class=\"number\">4</span>), (<span class=\"string\">\"e\"</span>, <span class=\"number\">5</span>),\n]).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = map.range().ge(<span class=\"string\">\"b\"</span>).lt(<span class=\"string\">\"e\"</span>).into_stream();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>kvs = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((k, v)) = stream.next() {\n    kvs.push((k.to_vec(), v));\n}\n<span class=\"macro\">assert_eq!</span>(kvs, <span class=\"macro\">vec!</span>[\n    (<span class=\"string\">b\"b\"</span>.to_vec(), <span class=\"number\">2</span>),\n    (<span class=\"string\">b\"c\"</span>.to_vec(), <span class=\"number\">3</span>),\n    (<span class=\"string\">b\"d\"</span>.to_vec(), <span class=\"number\">4</span>),\n]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.search\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">search</a>&lt;A&gt;(&amp;self, aut: A) -&gt; StreamBuilder&lt;'_, A&gt;<div class=\"where\">where\n    A: Automaton,</div></h4></section></summary><div class=\"docblock\"><p>Executes an automaton on the keys of this map.</p>\n<p>Note that this returns a <code>StreamBuilder</code>, which can be used to\nadd a range query to the search (see the <code>range</code> method).</p>\n<p>Memory requirements are the same as described on <code>Map::stream</code>.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<p>An implementation of regular expressions for <code>Automaton</code> is available\nin the <code>regex-automata</code> crate with the <code>fst1</code> feature enabled, which\ncan be used to search maps.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<p>An implementation of subsequence search for <code>Automaton</code> can be used\nto search maps:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::automaton::Subsequence;\n<span class=\"kw\">use </span>fst::{IntoStreamer, Streamer, Map};\n\n<span class=\"kw\">fn </span>example() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Box&lt;<span class=\"kw\">dyn </span>std::error::Error&gt;&gt; {\n    <span class=\"kw\">let </span>map = Map::from_iter(<span class=\"macro\">vec!</span>[\n        (<span class=\"string\">\"a foo bar\"</span>, <span class=\"number\">1</span>),\n        (<span class=\"string\">\"foo\"</span>, <span class=\"number\">2</span>),\n        (<span class=\"string\">\"foo1\"</span>, <span class=\"number\">3</span>),\n        (<span class=\"string\">\"foo2\"</span>, <span class=\"number\">4</span>),\n        (<span class=\"string\">\"foo3\"</span>, <span class=\"number\">5</span>),\n        (<span class=\"string\">\"foobar\"</span>, <span class=\"number\">6</span>),\n    ]).unwrap();\n\n    <span class=\"kw\">let </span>matcher = Subsequence::new(<span class=\"string\">\"for\"</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = map.search(<span class=\"kw-2\">&amp;</span>matcher).into_stream();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>kvs = <span class=\"macro\">vec!</span>[];\n    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((k, v)) = stream.next() {\n        kvs.push((String::from_utf8(k.to_vec())<span class=\"question-mark\">?</span>, v));\n    }\n    <span class=\"macro\">assert_eq!</span>(kvs, <span class=\"macro\">vec!</span>[\n        (<span class=\"string\">\"a foo bar\"</span>.to_string(), <span class=\"number\">1</span>), (<span class=\"string\">\"foobar\"</span>.to_string(), <span class=\"number\">6</span>),\n    ]);\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.search_with_state\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">search_with_state</a>&lt;A&gt;(&amp;self, aut: A) -&gt; StreamWithStateBuilder&lt;'_, A&gt;<div class=\"where\">where\n    A: Automaton,</div></h4></section></summary><div class=\"docblock\"><p>Executes an automaton on the keys of this map and yields matching\nkeys along with the corresponding matching states in the given\nautomaton.</p>\n<p>Note that this returns a <code>StreamWithStateBuilder</code>, which can be used to\nadd a range query to the search (see the <code>range</code> method).</p>\n<p>Memory requirements are the same as described on <code>Map::stream</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if and only if this map is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.op\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">op</a>(&amp;self) -&gt; OpBuilder&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new map operation with this map added to it.</p>\n<p>The <code>OpBuilder</code> type can be used to add additional map streams\nand perform set operations like union, intersection, difference and\nsymmetric difference on the keys of the map. These set operations also\nallow one to specify how conflicting values are merged in the stream.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<p>This example demonstrates a union on multiple map streams. Notice that\nthe stream returned from the union is not a sequence of key-value\npairs, but rather a sequence of keys associated with one or more\nvalues. Namely, a key is associated with each value associated with\nthat same key in the all of the streams.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>fst::{Streamer, Map};\n<span class=\"kw\">use </span>fst::map::IndexedValue;\n\n<span class=\"kw\">let </span>map1 = Map::from_iter(<span class=\"macro\">vec!</span>[\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>), (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>), (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]).unwrap();\n<span class=\"kw\">let </span>map2 = Map::from_iter(<span class=\"macro\">vec!</span>[\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">10</span>), (<span class=\"string\">\"y\"</span>, <span class=\"number\">11</span>), (<span class=\"string\">\"z\"</span>, <span class=\"number\">12</span>),\n]).unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>union = map1.op().add(<span class=\"kw-2\">&amp;</span>map2).union();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>kvs = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>((k, vs)) = union.next() {\n    kvs.push((k.to_vec(), vs.to_vec()));\n}\n<span class=\"macro\">assert_eq!</span>(kvs, <span class=\"macro\">vec!</span>[\n    (<span class=\"string\">b\"a\"</span>.to_vec(), <span class=\"macro\">vec!</span>[\n        IndexedValue { index: <span class=\"number\">0</span>, value: <span class=\"number\">1 </span>},\n        IndexedValue { index: <span class=\"number\">1</span>, value: <span class=\"number\">10 </span>},\n    ]),\n    (<span class=\"string\">b\"b\"</span>.to_vec(), <span class=\"macro\">vec!</span>[IndexedValue { index: <span class=\"number\">0</span>, value: <span class=\"number\">2 </span>}]),\n    (<span class=\"string\">b\"c\"</span>.to_vec(), <span class=\"macro\">vec!</span>[IndexedValue { index: <span class=\"number\">0</span>, value: <span class=\"number\">3 </span>}]),\n    (<span class=\"string\">b\"y\"</span>.to_vec(), <span class=\"macro\">vec!</span>[IndexedValue { index: <span class=\"number\">1</span>, value: <span class=\"number\">11 </span>}]),\n    (<span class=\"string\">b\"z\"</span>.to_vec(), <span class=\"macro\">vec!</span>[IndexedValue { index: <span class=\"number\">1</span>, value: <span class=\"number\">12 </span>}]),\n]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fst\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_fst</a>(&amp;self) -&gt; &amp;Fst&lt;D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the underlying raw finite state transducer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_fst\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_fst</a>(self) -&gt; Fst&lt;D&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the underlying raw finite state transducer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map_data</a>&lt;F, T&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Map&lt;T&gt;, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(D) -&gt; T,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Maps the underlying data of the fst Map to another data type.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<p>This example shows that you can map an fst Map based on a <code>Vec&lt;u8&gt;</code>\ninto an fst Map based on a <code>Cow&lt;[u8]&gt;</code>, it can also work with a\nreference counted type (e.g. <code>Arc</code>, <code>Rc</code>).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">use </span>fst::Map;\n\n<span class=\"kw\">let </span>map: Map&lt;Vec&lt;u8&gt;&gt; = Map::from_iter(\n    [(<span class=\"string\">\"hello\"</span>, <span class=\"number\">12</span>), (<span class=\"string\">\"world\"</span>, <span class=\"number\">42</span>)].iter().cloned(),\n).unwrap();\n\n<span class=\"kw\">let </span>map_on_cow: Map&lt;Cow&lt;[u8]&gt;&gt; = map.map_data(Cow::Owned).unwrap();</code></pre></div></div></details></div></details>",0,"index::inverted_index::FstMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3CVec%3Cu8%3E%3E\" class=\"impl\"><a href=\"#impl-Map%3CVec%3Cu8%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Map&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_iter</a>&lt;K, I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Map&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, Error&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (K, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a <code>Map</code> from an iterator of lexicographically ordered byte\nstrings and associated values.</p>\n<p>If the iterator does not yield unique keys in lexicographic order, then\nan error is returned.</p>\n<p>Note that this is a convenience function to build a map in memory.\nTo build a map that streams to an arbitrary <code>io::Write</code>, use\n<code>MapBuilder</code>.</p>\n</div></details></div></details>",0,"index::inverted_index::FstMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[33090]}