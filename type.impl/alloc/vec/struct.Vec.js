(function() {
    var type_impls = Object.fromEntries([["common_meta",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Arg-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Arg for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'b,</div></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;,</div></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Arg-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Arg for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'b,</div></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;,</div></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsBytes-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsBytes for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns slice of bytes for this data type.</div></details></div></details>","AsBytes","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsyncWrite for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>bufs</code> into the object using vectored\nIO operations. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to flush the object, ensuring that any buffered data reach\ntheir destination. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to close the object. <a>Read more</a></div></details></div></details>","AsyncWrite","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsyncWrite for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Like <a href=\"AsyncWrite::poll_write\"><code>poll_write</code></a>, except that it writes from a slice of buffers. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this writer has an efficient <a href=\"AsyncWrite::poll_write_vectored\"><code>poll_write_vectored</code></a>\nimplementation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to flush the object, ensuring that any buffered data reach\ntheir destination. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_shutdown\" class=\"method trait-impl\"><a href=\"#method.poll_shutdown\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_shutdown</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down. <a>Read more</a></div></details></div></details>","AsyncWrite","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMut-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-BufMut-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BufMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_mut\" class=\"method trait-impl\"><a href=\"#method.remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_mut\" class=\"method trait-impl\"><a href=\"#method.advance_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">advance_mut</a>(&amp;mut self, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Advance the internal cursor of the BufMut <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_mut\" class=\"method trait-impl\"><a href=\"#method.chunk_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chunk_mut</a>(&amp;mut self) -&gt; &amp;mut UninitSlice</h4></section></summary><div class='docblock'>Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and <code>BufMut::remaining_mut()</code>. Note that this <em>can</em> be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method trait-impl\"><a href=\"#method.put\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put</a>&lt;T&gt;(&amp;mut self, src: T)<div class=\"where\">where\n    T: Buf,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_slice\" class=\"method trait-impl\"><a href=\"#method.put_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_slice</a>(&amp;mut self, src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_bytes\" class=\"method trait-impl\"><a href=\"#method.put_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_bytes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Put <code>cnt</code> bytes <code>val</code> into <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_remaining_mut\" class=\"method trait-impl\"><a href=\"#method.has_remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if there is space in <code>self</code> for more bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u8\" class=\"method trait-impl\"><a href=\"#method.put_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i8\" class=\"method trait-impl\"><a href=\"#method.put_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Writes a signed 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16\" class=\"method trait-impl\"><a href=\"#method.put_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_le\" class=\"method trait-impl\"><a href=\"#method.put_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_ne\" class=\"method trait-impl\"><a href=\"#method.put_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16\" class=\"method trait-impl\"><a href=\"#method.put_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_le\" class=\"method trait-impl\"><a href=\"#method.put_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_ne\" class=\"method trait-impl\"><a href=\"#method.put_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32\" class=\"method trait-impl\"><a href=\"#method.put_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_le\" class=\"method trait-impl\"><a href=\"#method.put_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_ne\" class=\"method trait-impl\"><a href=\"#method.put_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32\" class=\"method trait-impl\"><a href=\"#method.put_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_le\" class=\"method trait-impl\"><a href=\"#method.put_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_ne\" class=\"method trait-impl\"><a href=\"#method.put_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64\" class=\"method trait-impl\"><a href=\"#method.put_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_le\" class=\"method trait-impl\"><a href=\"#method.put_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_ne\" class=\"method trait-impl\"><a href=\"#method.put_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64\" class=\"method trait-impl\"><a href=\"#method.put_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_le\" class=\"method trait-impl\"><a href=\"#method.put_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_ne\" class=\"method trait-impl\"><a href=\"#method.put_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128\" class=\"method trait-impl\"><a href=\"#method.put_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_le\" class=\"method trait-impl\"><a href=\"#method.put_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_ne\" class=\"method trait-impl\"><a href=\"#method.put_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128\" class=\"method trait-impl\"><a href=\"#method.put_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_le\" class=\"method trait-impl\"><a href=\"#method.put_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_ne\" class=\"method trait-impl\"><a href=\"#method.put_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint\" class=\"method trait-impl\"><a href=\"#method.put_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_le\" class=\"method trait-impl\"><a href=\"#method.put_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_ne\" class=\"method trait-impl\"><a href=\"#method.put_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int\" class=\"method trait-impl\"><a href=\"#method.put_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_le\" class=\"method trait-impl\"><a href=\"#method.put_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_ne\" class=\"method trait-impl\"><a href=\"#method.put_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32\" class=\"method trait-impl\"><a href=\"#method.put_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_le\" class=\"method trait-impl\"><a href=\"#method.put_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_ne\" class=\"method trait-impl\"><a href=\"#method.put_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64\" class=\"method trait-impl\"><a href=\"#method.put_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_le\" class=\"method trait-impl\"><a href=\"#method.put_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_ne\" class=\"method trait-impl\"><a href=\"#method.put_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Limit&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which can write at most <code>limit</code> bytes to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method trait-impl\"><a href=\"#method.writer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">writer</a>(self) -&gt; Writer&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which implements the <code>Write</code> trait for <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain_mut\" class=\"method trait-impl\"><a href=\"#method.chain_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain_mut</a>&lt;U&gt;(self, next: U) -&gt; Chain&lt;Self, U&gt;<div class=\"where\">where\n    U: BufMut,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this buffer with another. <a>Read more</a></div></details></div></details>","BufMut","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMutExt-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-BufMutExt-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BufMutExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.put_str_nul\" class=\"method trait-impl\"><a href=\"#method.put_str_nul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_str_nul</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>)</h4></section></div></details>","BufMutExt","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decode&lt;'_, MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: MySqlValueRef&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'_, MySql>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decode&lt;'_, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: PgValueRef&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'_, Postgres>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Any%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Any%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r&gt; Decode&lt;'r, Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: &lt;Any as Database&gt;::ValueRef&lt;'r&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Any>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T&gt; Decode&lt;'r, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; Decode&lt;'a, Postgres&gt; + Type&lt;Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(value: PgValueRef&lt;'r&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; DecodeValue&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Decode&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode&lt;'_, MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'_, MySql>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode&lt;'_, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'_, Postgres>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Any%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Any%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q&gt; Encode&lt;'q, Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut &lt;Any as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Any>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q, T&gt; Encode&lt;'q, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: for&lt;'a&gt; Encode&lt;'q, Postgres&gt;,\n    T: Encode&lt;'q, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Postgres>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Encode,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FixedTag for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26NodeInfoKey%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#232-242\">Source</a><a href=\"#impl-From%3C%26NodeInfoKey%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfoKey.html\" title=\"struct common_meta::cluster::NodeInfoKey\">NodeInfoKey</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#233-241\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(key: &amp;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfoKey.html\" title=\"struct common_meta::cluster::NodeInfoKey\">NodeInfoKey</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&NodeInfoKey>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4246\">Source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4254\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">\"123\"</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b'1'</span>, <span class=\"string\">b'2'</span>, <span class=\"string\">b'3'</span>]);</code></pre></div></div></details></div></details>","From<&str>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#214\">Source</a><a href=\"#impl-From%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#216\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ByteString>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: Bytes) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bytes>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: Bytes) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bytes>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: BytesMut) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BytesMut>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#727\">Source</a></span><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#732\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a> into a <code><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n<p>The conversion consumes the <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a>, and removes the terminating NUL byte.</p>\n</div></details></div></details>","From<CString>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDatanodeStatKey%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#386-391\">Source</a><a href=\"#impl-From%3CDatanodeStatKey%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatKey.html\" title=\"struct common_meta::datanode::DatanodeStatKey\">DatanodeStatKey</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#387-390\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatKey.html\" title=\"struct common_meta::datanode::DatanodeStatKey\">DatanodeStatKey</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<DatanodeStatKey>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SetOfVec&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: SetOfVec&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Signature&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: Signature) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Signature>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3188\">Source</a></span><a href=\"#impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3201\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(string: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> to a vector <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> that holds values of type <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1 = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>v1 = Vec::from(s1);\n\n<span class=\"kw\">for </span>b <span class=\"kw\">in </span>v1 {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{b}\"</span>);\n}</code></pre></div></div></details></div></details>","From<String>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUuid%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.18.1/src/uuid/lib.rs.html#969\">Source</a><a href=\"#impl-From%3CUuid%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.18.1/src/uuid/lib.rs.html#970\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Uuid>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromHex-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#188\">Source</a><a href=\"#impl-FromHex-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#189\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://docs.rs/hex/0.4.3/hex/error/enum.FromHexError.html\" title=\"enum hex::error::FromHexError\">FromHexError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#191\">Source</a><a href=\"#method.from_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#tymethod.from_hex\" class=\"fn\">from_hex</a>&lt;T&gt;(hex: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#associatedtype.Error\" title=\"type hex::FromHex::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of type <code>Self</code> from the given hex string, or fails\nwith a custom error type. <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#tymethod.from_hex\">Read more</a></div></details></div></details>","FromHex","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    _: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoArrayRef-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-IntoArrayRef-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoArrayRef for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.into_array_ref\" class=\"method trait-impl\"><a href=\"#method.into_array_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_array_ref</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn Array&gt;</h4></section></div></details>","IntoArrayRef","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoResponse for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_response\" class=\"method trait-impl\"><a href=\"#method.into_response\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_response</a>(self) -&gt; Response&lt;Body&gt;</h4></section></summary><div class='docblock'>Create a response.</div></details></div></details>","IntoResponse","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Literal-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Literal-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Literal for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lit\" class=\"method trait-impl\"><a href=\"#method.lit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lit</a>(&amp;self) -&gt; Expr</h4></section></summary><div class='docblock'>convert the value to a Literal expression</div></details></div></details>","Literal","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Message-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#359\">Source</a><a href=\"#impl-Message-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\">Message</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#378\">Source</a><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#tymethod.encoded_len\" class=\"fn\">encoded_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the encoded length of the message without a length delimiter.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#385\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clears the message, resetting all fields to their default.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#48-50\">Source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode\" class=\"fn\">encode</a>(&amp;self, buf: &amp;mut impl BufMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#63-65\">Source</a><a href=\"#method.encode_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_to_vec\" class=\"fn\">encode_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#76-78\">Source</a><a href=\"#method.encode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited\" class=\"fn\">encode_length_delimited</a>(\n    &amp;self,\n    buf: &amp;mut impl BufMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#92-94\">Source</a><a href=\"#method.encode_length_delimited_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited_to_vec\" class=\"fn\">encode_length_delimited_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#107-109\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode\" class=\"fn\">decode</a>(buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#116-118\">Source</a><a href=\"#method.decode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode_length_delimited\" class=\"fn\">decode_length_delimited</a>(buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from the buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#128-130\">Source</a><a href=\"#method.merge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge\" class=\"fn\">merge</a>(&amp;mut self, buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer, and merges it into <code>self</code>. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#142-144\">Source</a><a href=\"#method.merge_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge_length_delimited\" class=\"fn\">merge_length_delimited</a>(&amp;mut self, buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from buffer, and\nmerges it into <code>self</code>.</div></details></div></details>","Message","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Name-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#391\">Source</a><a href=\"#impl-Name-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html\" title=\"trait prost::name::Name\">Name</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#392\">Source</a><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#associatedconstant.NAME\" class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;BytesValue&quot;</h4></section></summary><div class='docblock'>Simple name for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nThis name is the same as it appears in the source .proto file, e.g. <code>FooBar</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.PACKAGE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#393\">Source</a><a href=\"#associatedconstant.PACKAGE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#associatedconstant.PACKAGE\" class=\"constant\">PACKAGE</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;google.protobuf&quot;</h4></section></summary><div class='docblock'>Package name this message type is contained in. They are domain-like\nand delimited by <code>.</code>, e.g. <code>google.protobuf</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_url\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#395\">Source</a><a href=\"#method.type_url\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#method.type_url\" class=\"fn\">type_url</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Type URL for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>, which by default is the full name with a\nleading slash, but may also include a leading domain name, e.g.\n<code>type.googleapis.com/google.profile.Person</code>.\nThis can be used when serializing into the <code>google.protobuf.Any</code> type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/name.rs.html#23\">Source</a><a href=\"#method.full_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#method.full_name\" class=\"fn\">full_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Fully-qualified unique name for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nIt’s prefixed with the package name and names of any parent messages,\ne.g. <code>google.rpc.BadRequest.FieldViolation</code>.\nBy default, this is the package name followed by the message name.\nFully-qualified names must be unique within a domain of Type URLs.</div></details></div></details>","Name","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteStr%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#667\">Source</a><a href=\"#impl-PartialEq%3CByteStr%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#667\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteStr>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#523\">Source</a><a href=\"#impl-PartialEq%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#523\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteString>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<BytesMut>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;VecList&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VecList&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VecList<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BytesMut>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PgHasArrayType-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PgHasArrayType-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PgHasArrayType for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.array_type_info\" class=\"method trait-impl\"><a href=\"#method.array_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_type_info</a>() -&gt; PgTypeInfo</h4></section><section id=\"method.array_compatible\" class=\"method trait-impl\"><a href=\"#method.array_compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>","PgHasArrayType","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#199\">Source</a><a href=\"#impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#200\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<[u8]>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfHash-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#217\">Source</a><a href=\"#impl-PhfHash-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html\" title=\"trait phf_shared::PhfHash\">PhfHash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#219\">Source</a><a href=\"#method.phf_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html#tymethod.phf_hash\" class=\"fn\">phf_hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds the value into the state given, updating the hasher as necessary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#72-74\">Source</a><a href=\"#method.phf_hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html#method.phf_hash_slice\" class=\"fn\">phf_hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the state provided.</div></details></div></details>","PhfHash","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProtobufValue-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-ProtobufValue-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ProtobufValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; ReflectValueRef&lt;'_&gt;</h4></section></summary><div class='docblock'>As ref</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method trait-impl\"><a href=\"#method.as_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></summary><div class='docblock'>Convert to <code>Any</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_non_zero\" class=\"method trait-impl\"><a href=\"#method.is_non_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_non_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is value non-zero?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref_copy\" class=\"method trait-impl\"><a href=\"#method.as_ref_copy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ref_copy</a>(&amp;self) -&gt; ReflectValueRef&lt;'static&gt;</h4></section></summary><div class='docblock'>Return <code>ProtobufValueRef</code> if self is <code>Copy</code>. <a>Read more</a></div></details></div></details>","ProtobufValue","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RangeReader-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-RangeReader-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RangeReader for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Metadata, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Returns the metadata of the source.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bytes, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_into\" class=\"method trait-impl\"><a href=\"#method.read_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_into</a>&lt;'life0, 'life1, 'async_trait&gt;(\n    &amp;'life0 self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,\n    buf: &amp;'life1 mut (impl BufMut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait),\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    Self: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given range into the buffer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vec\" class=\"method trait-impl\"><a href=\"#method.read_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_vec</a>&lt;'life0, 'life1, 'async_trait&gt;(\n    &amp;'life0 self,\n    ranges: &amp;'life1 [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;],\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Bytes&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    Self: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given ranges.</div></details></div></details>","RangeReader","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Replacer-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Replacer-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Replacer for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_append\" class=\"method trait-impl\"><a href=\"#method.replace_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">replace_append</a>(&amp;mut self, caps: &amp;Captures&lt;'_&gt;, dst: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Appends possibly empty data to <code>dst</code> to replace the current match. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_expansion\" class=\"method trait-impl\"><a href=\"#method.no_expansion\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">no_expansion</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;&gt;</h4></section></summary><div class='docblock'>Return a fixed unchanging replacement byte string. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>&lt;'r&gt;(&amp;'r mut self) -&gt; ReplacerRef&lt;'r, Self&gt;</h4></section></summary><div class='docblock'>Returns a type that implements <code>Replacer</code>, but that borrows and wraps\nthis <code>Replacer</code>. <a>Read more</a></div></details></div></details>","Replacer","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scalar-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Scalar-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Scalar for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.VectorType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.VectorType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">VectorType</a> = BinaryVector</h4></section><section id=\"associatedtype.RefType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RefType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RefType</a>&lt;'a&gt; = &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_scalar_ref\" class=\"method trait-impl\"><a href=\"#method.as_scalar_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_scalar_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Get a reference of the current value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upcast_gat\" class=\"method trait-impl\"><a href=\"#method.upcast_gat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">upcast_gat</a>&lt;'short, 'long&gt;(long: &amp;'long [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;'short [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;short [u8]\">ⓘ</a><div class=\"where\">where\n    'long: 'short,</div></h4></section></summary><div class='docblock'>Upcast GAT type’s lifetime.</div></details></div></details>","Scalar","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26ColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26ColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;ColumnDefaultConstraint&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;ColumnDefaultConstraint,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;ColumnDefaultConstraint&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&ColumnDefaultConstraint>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;ColumnDefaultConstraint&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: ColumnDefaultConstraint,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;ColumnDefaultConstraint&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<ColumnDefaultConstraint>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CDatanodeStatValue%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#442-452\">Source</a><a href=\"#impl-TryFrom%3CDatanodeStatValue%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatValue.html\" title=\"struct common_meta::datanode::DatanodeStatValue\">DatanodeStatValue</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#443\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#445-451\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(stats: <a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatValue.html\" title=\"struct common_meta::datanode::DatanodeStatValue\">DatanodeStatValue</a>) -&gt; <a class=\"type\" href=\"common_meta/error/type.Result.html\" title=\"type common_meta::error::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<DatanodeStatValue>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNodeInfo%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#262-270\">Source</a><a href=\"#impl-TryFrom%3CNodeInfo%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfo.html\" title=\"struct common_meta::cluster::NodeInfo\">NodeInfo</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#263\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#265-269\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(info: <a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfo.html\" title=\"struct common_meta::cluster::NodeInfo\">NodeInfo</a>) -&gt; <a class=\"type\" href=\"common_meta/error/type.Result.html\" title=\"type common_meta::error::Result\">Result</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<NodeInfo>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CAny%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Type%3CAny%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Type&lt;Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; AnyTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;&lt;DB as Database&gt;::TypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Any>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CMySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Type%3CMySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Type&lt;MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; MySqlTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;MySqlTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<MySql>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Type&lt;Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: PgHasArrayType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueOrd for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Values-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-Values-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; Values for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: Values,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self, mode: Mode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoded values for the given mode.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_encoded\" class=\"method trait-impl\"><a href=\"#method.write_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_encoded</a>&lt;W&gt;(&amp;self, mode: Mode, target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encodes the values in the given mode and writes them to <code>target</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.explicit\" class=\"method trait-impl\"><a href=\"#method.explicit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">explicit</a>(self, tag: Tag) -&gt; Constructed&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Converts the encoder into one with an explicit tag.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_captured\" class=\"method trait-impl\"><a href=\"#method.to_captured\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_captured</a>(&amp;self, mode: Mode) -&gt; Captured</h4></section></summary><div class='docblock'>Captures the encoded values in the given mode.</div></details></div></details>","Values","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Vec%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#480\">Source</a></span><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Write is implemented for <code>Vec&lt;u8&gt;</code> by appending to the vector.\nThe vector will grow as needed.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#482\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#488\">Source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#498\">Source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#503\">Source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#509\">Source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#515\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flushes this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1950\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1980-1982\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteBuf for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the valid data part of this container. Should only cover initialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method trait-impl\"><a href=\"#method.capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the full capacity of this container. May include uninitialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method trait-impl\"><a href=\"#method.as_mut_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the start of the data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filled_until\" class=\"method trait-impl\"><a href=\"#method.filled_until\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filled_until</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Indicates that the first <code>n</code> bytes of the container have been written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_from\" class=\"method trait-impl\"><a href=\"#method.write_from\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">write_from</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Call the given closure using the pointer and capacity from <code>self</code>. <a>Read more</a></div></details></div></details>","WriteBuf","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteBuf for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the valid data part of this container. Should only cover initialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method trait-impl\"><a href=\"#method.capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the full capacity of this container. May include uninitialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method trait-impl\"><a href=\"#method.as_mut_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the start of the data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filled_until\" class=\"method trait-impl\"><a href=\"#method.filled_until\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filled_until</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Indicates that the first <code>n</code> bytes of the container have been written.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_from\" class=\"method trait-impl\"><a href=\"#method.write_from\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">write_from</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Call the given closure using the pointer and capacity from <code>self</code>. <a>Read more</a></div></details></div></details>","WriteBuf","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","common_meta::key::view_info::RawViewLogicalPlan"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","common_meta::key::view_info::RawViewLogicalPlan"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","common_meta::key::view_info::RawViewLogicalPlan"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","common_meta::key::view_info::RawViewLogicalPlan"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","common_meta::key::view_info::RawViewLogicalPlan"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","common_meta::key::view_info::RawViewLogicalPlan"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","common_meta::key::view_info::RawViewLogicalPlan"]]],["index",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Arg-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Arg for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'b,</div></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;,</div></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Arg-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Arg-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Arg for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method trait-impl\"><a href=\"#method.as_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a string slice.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_lossy\" class=\"method trait-impl\"><a href=\"#method.to_string_lossy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a potentially-lossy rendering of this string as a\n<code>Cow&lt;'_, str&gt;</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_cow_c_str\" class=\"method trait-impl\"><a href=\"#method.as_cow_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_cow_c_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;</h4></section></summary><div class='docblock'>Returns a view of this string as a maybe-owned <a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_c_str\" class=\"method trait-impl\"><a href=\"#method.into_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_c_str</a>&lt;'b&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'b, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>&gt;, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'b,</div></h4></section></summary><div class='docblock'>Consumes <code>self</code> and returns a view of this string as a maybe-owned\n<a href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\"><code>CStr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_with_c_str\" class=\"method trait-impl\"><a href=\"#method.into_with_c_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_with_c_str</a>&lt;T, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Errno&gt;,</div></h4></section></summary><div class='docblock'>Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.</div></details></div></details>","Arg","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsBytes-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsBytes for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns slice of bytes for this data type.</div></details></div></details>","AsBytes","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsyncWrite for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>bufs</code> into the object using vectored\nIO operations. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to flush the object, ensuring that any buffered data reach\ntheir destination. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to close the object. <a>Read more</a></div></details></div></details>","AsyncWrite","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-AsyncWrite-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsyncWrite for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Like <a href=\"AsyncWrite::poll_write\"><code>poll_write</code></a>, except that it writes from a slice of buffers. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this writer has an efficient <a href=\"AsyncWrite::poll_write_vectored\"><code>poll_write_vectored</code></a>\nimplementation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to flush the object, ensuring that any buffered data reach\ntheir destination. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_shutdown\" class=\"method trait-impl\"><a href=\"#method.poll_shutdown\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_shutdown</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;,\n    _cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down. <a>Read more</a></div></details></div></details>","AsyncWrite","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BinarySerializable-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-BinarySerializable-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; BinarySerializable for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BinarySerializable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Serialize</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Deserialize</div></details><section id=\"method.num_bytes\" class=\"method trait-impl\"><a href=\"#method.num_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">num_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></div></details>","BinarySerializable","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMut-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-BufMut-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BufMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining_mut\" class=\"method trait-impl\"><a href=\"#method.remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of bytes that can be written from the current\nposition until the end of the buffer is reached. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance_mut\" class=\"method trait-impl\"><a href=\"#method.advance_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">advance_mut</a>(&amp;mut self, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Advance the internal cursor of the BufMut <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_mut\" class=\"method trait-impl\"><a href=\"#method.chunk_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chunk_mut</a>(&amp;mut self) -&gt; &amp;mut UninitSlice</h4></section></summary><div class='docblock'>Returns a mutable slice starting at the current BufMut position and of\nlength between 0 and <code>BufMut::remaining_mut()</code>. Note that this <em>can</em> be shorter than the\nwhole remainder of the buffer (this allows non-continuous implementation). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method trait-impl\"><a href=\"#method.put\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put</a>&lt;T&gt;(&amp;mut self, src: T)<div class=\"where\">where\n    T: Buf,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_slice\" class=\"method trait-impl\"><a href=\"#method.put_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_slice</a>(&amp;mut self, src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor by the\nnumber of bytes written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_bytes\" class=\"method trait-impl\"><a href=\"#method.put_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_bytes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, cnt: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Put <code>cnt</code> bytes <code>val</code> into <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_remaining_mut\" class=\"method trait-impl\"><a href=\"#method.has_remaining_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_remaining_mut</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if there is space in <code>self</code> for more bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u8\" class=\"method trait-impl\"><a href=\"#method.put_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i8\" class=\"method trait-impl\"><a href=\"#method.put_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i8</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Writes a signed 8 bit integer to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16\" class=\"method trait-impl\"><a href=\"#method.put_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_le\" class=\"method trait-impl\"><a href=\"#method.put_u16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u16_ne\" class=\"method trait-impl\"><a href=\"#method.put_u16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16\" class=\"method trait-impl\"><a href=\"#method.put_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_le\" class=\"method trait-impl\"><a href=\"#method.put_i16_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i16_ne\" class=\"method trait-impl\"><a href=\"#method.put_i16_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i16_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Writes a signed 16 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32\" class=\"method trait-impl\"><a href=\"#method.put_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_le\" class=\"method trait-impl\"><a href=\"#method.put_u32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u32_ne\" class=\"method trait-impl\"><a href=\"#method.put_u32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32\" class=\"method trait-impl\"><a href=\"#method.put_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_le\" class=\"method trait-impl\"><a href=\"#method.put_i32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i32_ne\" class=\"method trait-impl\"><a href=\"#method.put_i32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Writes a signed 32 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64\" class=\"method trait-impl\"><a href=\"#method.put_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_le\" class=\"method trait-impl\"><a href=\"#method.put_u64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u64_ne\" class=\"method trait-impl\"><a href=\"#method.put_u64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64\" class=\"method trait-impl\"><a href=\"#method.put_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_le\" class=\"method trait-impl\"><a href=\"#method.put_i64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i64_ne\" class=\"method trait-impl\"><a href=\"#method.put_i64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Writes a signed 64 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128\" class=\"method trait-impl\"><a href=\"#method.put_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_le\" class=\"method trait-impl\"><a href=\"#method.put_u128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_u128_ne\" class=\"method trait-impl\"><a href=\"#method.put_u128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_u128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Writes an unsigned 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128\" class=\"method trait-impl\"><a href=\"#method.put_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in the big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_le\" class=\"method trait-impl\"><a href=\"#method.put_i128_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_i128_ne\" class=\"method trait-impl\"><a href=\"#method.put_i128_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_i128_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Writes a signed 128 bit integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint\" class=\"method trait-impl\"><a href=\"#method.put_uint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_le\" class=\"method trait-impl\"><a href=\"#method.put_uint_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_uint_ne\" class=\"method trait-impl\"><a href=\"#method.put_uint_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_uint_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes an unsigned n-byte integer to <code>self</code> in the native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int\" class=\"method trait-impl\"><a href=\"#method.put_int\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_le\" class=\"method trait-impl\"><a href=\"#method.put_int_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_int_ne\" class=\"method trait-impl\"><a href=\"#method.put_int_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_int_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>, nbytes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Writes low <code>nbytes</code> of a signed integer to <code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32\" class=\"method trait-impl\"><a href=\"#method.put_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_le\" class=\"method trait-impl\"><a href=\"#method.put_f32_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f32_ne\" class=\"method trait-impl\"><a href=\"#method.put_f32_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f32_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html\">f32</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 single-precision (4 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64\" class=\"method trait-impl\"><a href=\"#method.put_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in big-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_le\" class=\"method trait-impl\"><a href=\"#method.put_f64_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_le</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in little-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_f64_ne\" class=\"method trait-impl\"><a href=\"#method.put_f64_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_f64_ne</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class='docblock'>Writes an IEEE754 double-precision (8 bytes) floating point number to\n<code>self</code> in native-endian byte order. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.limit\" class=\"method trait-impl\"><a href=\"#method.limit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Limit&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which can write at most <code>limit</code> bytes to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writer\" class=\"method trait-impl\"><a href=\"#method.writer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">writer</a>(self) -&gt; Writer&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adaptor which implements the <code>Write</code> trait for <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain_mut\" class=\"method trait-impl\"><a href=\"#method.chain_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain_mut</a>&lt;U&gt;(self, next: U) -&gt; Chain&lt;Self, U&gt;<div class=\"where\">where\n    U: BufMut,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an adapter which will chain this buffer with another. <a>Read more</a></div></details></div></details>","BufMut","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BufMutExt-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-BufMutExt-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BufMutExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.put_str_nul\" class=\"method trait-impl\"><a href=\"#method.put_str_nul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">put_str_nul</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>)</h4></section></div></details>","BufMutExt","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decode&lt;'_, MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: MySqlValueRef&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'_, MySql>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decode&lt;'_, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: PgValueRef&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'_, Postgres>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Any%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Any%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r&gt; Decode&lt;'r, Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(\n    value: &lt;Any as Database&gt;::ValueRef&lt;'r&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Any>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T&gt; Decode&lt;'r, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; Decode&lt;'a, Postgres&gt; + Type&lt;Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(value: PgValueRef&lt;'r&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; DecodeValue&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Decode&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'_,+MySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode&lt;'_, MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'_, MySql>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'_,+Postgres%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encode&lt;'_, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'_, Postgres>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Any%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Any%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q&gt; Encode&lt;'q, Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut &lt;Any as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Any>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q, T&gt; Encode&lt;'q, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: for&lt;'a&gt; Encode&lt;'q, Postgres&gt;,\n    T: Encode&lt;'q, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Postgres>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Encode,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FixedTag for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26NodeInfoKey%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#232\">Source</a><a href=\"#impl-From%3C%26NodeInfoKey%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfoKey.html\" title=\"struct common_meta::cluster::NodeInfoKey\">NodeInfoKey</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#233\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(key: &amp;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfoKey.html\" title=\"struct common_meta::cluster::NodeInfoKey\">NodeInfoKey</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&NodeInfoKey>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4246\">Source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4254\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">\"123\"</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b'1'</span>, <span class=\"string\">b'2'</span>, <span class=\"string\">b'3'</span>]);</code></pre></div></div></details></div></details>","From<&str>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#214\">Source</a><a href=\"#impl-From%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#216\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ByteString>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_base/bytes.rs.html#47\">Source</a><a href=\"#impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"common_base/bytes/struct.Bytes.html\" title=\"struct common_base::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/bytes.rs.html#48\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: <a class=\"struct\" href=\"common_base/bytes/struct.Bytes.html\" title=\"struct common_base::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bytes>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: Bytes) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bytes>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bytes: BytesMut) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BytesMut>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#727\">Source</a></span><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/ffi/c_str.rs.html#732\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a> into a <code><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n<p>The conversion consumes the <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.CString.html\" title=\"struct alloc::ffi::c_str::CString\"><code>CString</code></a>, and removes the terminating NUL byte.</p>\n</div></details></div></details>","From<CString>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDaryHeap%3CT,+D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CDaryHeap%3CT,+D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;DaryHeap&lt;T, D&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: DaryHeap&lt;T, D&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>DaryHeap&lt;T, D&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<DaryHeap<T, D>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDatanodeStatKey%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#386\">Source</a><a href=\"#impl-From%3CDatanodeStatKey%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatKey.html\" title=\"struct common_meta::datanode::DatanodeStatKey\">DatanodeStatKey</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#387\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatKey.html\" title=\"struct common_meta::datanode::DatanodeStatKey\">DatanodeStatKey</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<DatanodeStatKey>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SetOfVec&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: SetOfVec&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-From%3CSignature%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Signature&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: Signature) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Signature>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3188\">Source</a></span><a href=\"#impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/string.rs.html#3201\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(string: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\"><code>String</code></a> to a vector <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> that holds values of type <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1 = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>v1 = Vec::from(s1);\n\n<span class=\"kw\">for </span>b <span class=\"kw\">in </span>v1 {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{b}\"</span>);\n}</code></pre></div></div></details></div></details>","From<String>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CUuid%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.18.1/src/uuid/lib.rs.html#969\">Source</a><a href=\"#impl-From%3CUuid%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/uuid/1.18.1/src/uuid/lib.rs.html#970\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://docs.rs/uuid/1.18.1/uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Uuid>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#223\">Source</a><a href=\"#impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#224\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecStorage<T, R, C>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromHex-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#188\">Source</a><a href=\"#impl-FromHex-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#189\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://docs.rs/hex/0.4.3/hex/error/enum.FromHexError.html\" title=\"enum hex::error::FromHexError\">FromHexError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_hex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/hex/0.4.3/src/hex/lib.rs.html#191\">Source</a><a href=\"#method.from_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#tymethod.from_hex\" class=\"fn\">from_hex</a>&lt;T&gt;(hex: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html\" title=\"trait hex::FromHex\">FromHex</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#associatedtype.Error\" title=\"type hex::FromHex::Error\">Error</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of type <code>Self</code> from the given hex string, or fails\nwith a custom error type. <a href=\"https://docs.rs/hex/0.4.3/hex/trait.FromHex.html#tymethod.from_hex\">Read more</a></div></details></div></details>","FromHex","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromParallelIterator&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Collects items from a parallel iterator into a vector.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","FromParallelIterator<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    _: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoArrayRef-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-IntoArrayRef-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoArrayRef for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.into_array_ref\" class=\"method trait-impl\"><a href=\"#method.into_array_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_array_ref</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;dyn Array&gt;</h4></section></div></details>","IntoArrayRef","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoParallelIterator for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as IntoParallelIterator&gt;::Iter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoParallelIterator&gt;::Iter\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a>Read more</a></div></details></div></details>","IntoParallelIterator","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-IntoResponse-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoResponse for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_response\" class=\"method trait-impl\"><a href=\"#method.into_response\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_response</a>(self) -&gt; Response&lt;Body&gt;</h4></section></summary><div class='docblock'>Create a response.</div></details></div></details>","IntoResponse","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Literal-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Literal-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Literal for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lit\" class=\"method trait-impl\"><a href=\"#method.lit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lit</a>(&amp;self) -&gt; Expr</h4></section></summary><div class='docblock'>convert the value to a Literal expression</div></details></div></details>","Literal","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Message-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#359\">Source</a><a href=\"#impl-Message-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\">Message</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#378\">Source</a><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#tymethod.encoded_len\" class=\"fn\">encoded_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the encoded length of the message without a length delimiter.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#385\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clears the message, resetting all fields to their default.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#48-50\">Source</a><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode\" class=\"fn\">encode</a>(&amp;self, buf: &amp;mut impl BufMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#63-65\">Source</a><a href=\"#method.encode_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_to_vec\" class=\"fn\">encode_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#76-78\">Source</a><a href=\"#method.encode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited\" class=\"fn\">encode_length_delimited</a>(\n    &amp;self,\n    buf: &amp;mut impl BufMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.EncodeError.html\" title=\"struct prost::error::EncodeError\">EncodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_length_delimited_to_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#92-94\">Source</a><a href=\"#method.encode_length_delimited_to_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.encode_length_delimited_to_vec\" class=\"fn\">encode_length_delimited_to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes the message with a length-delimiter to a newly allocated buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#107-109\">Source</a><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode\" class=\"fn\">decode</a>(buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#116-118\">Source</a><a href=\"#method.decode_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.decode_length_delimited\" class=\"fn\">decode_length_delimited</a>(buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from the buffer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#128-130\">Source</a><a href=\"#method.merge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge\" class=\"fn\">merge</a>(&amp;mut self, buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes an instance of the message from a buffer, and merges it into <code>self</code>. <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_length_delimited\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/message.rs.html#142-144\">Source</a><a href=\"#method.merge_length_delimited\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html#method.merge_length_delimited\" class=\"fn\">merge_length_delimited</a>(&amp;mut self, buf: impl Buf) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/prost/0.13.5/prost/error/struct.DecodeError.html\" title=\"struct prost::error::DecodeError\">DecodeError</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decodes a length-delimited instance of the message from buffer, and\nmerges it into <code>self</code>.</div></details></div></details>","Message","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Name-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#391\">Source</a><a href=\"#impl-Name-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html\" title=\"trait prost::name::Name\">Name</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3><div class=\"docblock\"><p><code>google.protobuf.BytesValue</code></p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#392\">Source</a><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#associatedconstant.NAME\" class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;BytesValue&quot;</h4></section></summary><div class='docblock'>Simple name for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nThis name is the same as it appears in the source .proto file, e.g. <code>FooBar</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.PACKAGE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#393\">Source</a><a href=\"#associatedconstant.PACKAGE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#associatedconstant.PACKAGE\" class=\"constant\">PACKAGE</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a> = &quot;google.protobuf&quot;</h4></section></summary><div class='docblock'>Package name this message type is contained in. They are domain-like\nand delimited by <code>.</code>, e.g. <code>google.protobuf</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_url\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/types.rs.html#395\">Source</a><a href=\"#method.type_url\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#method.type_url\" class=\"fn\">type_url</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Type URL for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>, which by default is the full name with a\nleading slash, but may also include a leading domain name, e.g.\n<code>type.googleapis.com/google.profile.Person</code>.\nThis can be used when serializing into the <code>google.protobuf.Any</code> type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/prost/0.13.5/src/prost/name.rs.html#23\">Source</a><a href=\"#method.full_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/prost/0.13.5/prost/name/trait.Name.html#method.full_name\" class=\"fn\">full_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>Fully-qualified unique name for this <a href=\"https://docs.rs/prost/0.13.5/prost/message/trait.Message.html\" title=\"trait prost::message::Message\"><code>Message</code></a>.\nIt’s prefixed with the package name and names of any parent messages,\ne.g. <code>google.rpc.BadRequest.FieldViolation</code>.\nBy default, this is the package name followed by the message name.\nFully-qualified names must be unique within a domain of Type URLs.</div></details></div></details>","Name","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; OverlayResource&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ResourceIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ResourceIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ResourceIter</a>&lt;'a&gt; = SingleResourceIterator&lt;'a, P&gt;\n<span class=\"where\">where\n    P: 'a,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;: 'a</span></h4></section><section id=\"method.iter_paths\" class=\"method trait-impl\"><a href=\"#method.iter_paths\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_paths</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;&#39;_&gt;\">ⓘ</a></h4></section></div></details>","OverlayResource<P, T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; ParallelExtend&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with copied items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<&'a T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ParallelExtend&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteStr%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#667\">Source</a><a href=\"#impl-PartialEq%3CByteStr%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#667\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/bstr/struct.ByteStr.html\" title=\"struct core::bstr::ByteStr\">ByteStr</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteStr>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#523\">Source</a><a href=\"#impl-PartialEq%3CByteString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/bstr.rs.html#523\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/bstr/struct.ByteString.html\" title=\"struct alloc::bstr::ByteString\">ByteString</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ByteString>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_base/bytes.rs.html#67\">Source</a><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"common_base/bytes/struct.Bytes.html\" title=\"struct common_base::bytes::Bytes\">Bytes</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/bytes.rs.html#68\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"common_base/bytes/struct.Bytes.html\" title=\"struct common_base::bytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Bytes>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<BytesMut>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;VecList&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VecList&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VecList<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytes%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Bytes&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Bytes) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Bytes>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CBytesMut%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BytesMut&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;BytesMut) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<BytesMut>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PgHasArrayType-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-PgHasArrayType-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PgHasArrayType for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.array_type_info\" class=\"method trait-impl\"><a href=\"#method.array_type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_type_info</a>() -&gt; PgTypeInfo</h4></section><section id=\"method.array_compatible\" class=\"method trait-impl\"><a href=\"#method.array_compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">array_compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>","PgHasArrayType","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#199\">Source</a><a href=\"#impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#200\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<[u8]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.12/src/phf_shared/lib.rs.html#199\">Source</a><a href=\"#impl-PhfBorrow%3C%5Bu8%5D%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.12/phf_shared/trait.PhfBorrow.html\" title=\"trait phf_shared::PhfBorrow\">PhfBorrow</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.12/src/phf_shared/lib.rs.html#200\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.12/phf_shared/trait.PhfBorrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Convert a reference to <code>self</code> to a reference to the borrowed type.</div></details></div></details>","PhfBorrow<[u8]>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfHash-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#217\">Source</a><a href=\"#impl-PhfHash-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html\" title=\"trait phf_shared::PhfHash\">PhfHash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#219\">Source</a><a href=\"#method.phf_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html#tymethod.phf_hash\" class=\"fn\">phf_hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds the value into the state given, updating the hasher as necessary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.11/src/phf_shared/lib.rs.html#72-74\">Source</a><a href=\"#method.phf_hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.11/phf_shared/trait.PhfHash.html#method.phf_hash_slice\" class=\"fn\">phf_hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the state provided.</div></details></div></details>","PhfHash","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PhfHash-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.12/src/phf_shared/lib.rs.html#217\">Source</a><a href=\"#impl-PhfHash-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/phf_shared/0.12/phf_shared/trait.PhfHash.html\" title=\"trait phf_shared::PhfHash\">PhfHash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.12/src/phf_shared/lib.rs.html#219\">Source</a><a href=\"#method.phf_hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.12/phf_shared/trait.PhfHash.html#tymethod.phf_hash\" class=\"fn\">phf_hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds the value into the state given, updating the hasher as necessary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.phf_hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/phf_shared/0.12/src/phf_shared/lib.rs.html#72-74\">Source</a><a href=\"#method.phf_hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/phf_shared/0.12/phf_shared/trait.PhfHash.html#method.phf_hash_slice\" class=\"fn\">phf_hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the state provided.</div></details></div></details>","PhfHash","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProtobufValue-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-ProtobufValue-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ProtobufValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; ReflectValueRef&lt;'_&gt;</h4></section></summary><div class='docblock'>As ref</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method trait-impl\"><a href=\"#method.as_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></summary><div class='docblock'>Convert to <code>Any</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_non_zero\" class=\"method trait-impl\"><a href=\"#method.is_non_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_non_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Is value non-zero?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref_copy\" class=\"method trait-impl\"><a href=\"#method.as_ref_copy\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ref_copy</a>(&amp;self) -&gt; ReflectValueRef&lt;'static&gt;</h4></section></summary><div class='docblock'>Return <code>ProtobufValueRef</code> if self is <code>Copy</code>. <a>Read more</a></div></details></div></details>","ProtobufValue","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RangeReader-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_base/range_read.rs.html#192\">Source</a><a href=\"#impl-RangeReader-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"common_base/range_read/trait.RangeReader.html\" title=\"trait common_base::range_read::RangeReader\">RangeReader</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/range_read.rs.html#191\">Source</a><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"common_base/range_read/trait.RangeReader.html#tymethod.metadata\" class=\"fn\">metadata</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"common_base/range_read/struct.Metadata.html\" title=\"struct common_base::range_read::Metadata\">Metadata</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Returns the metadata of the source.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/range_read.rs.html#191\">Source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"common_base/range_read/trait.RangeReader.html#tymethod.read\" class=\"fn\">read</a>&lt;'life0, 'async_trait&gt;(\n    &amp;'life0 self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Bytes, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given range.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/range_read.rs.html#46\">Source</a><a href=\"#method.read_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"common_base/range_read/trait.RangeReader.html#method.read_into\" class=\"fn\">read_into</a>&lt;'life0, 'life1, 'async_trait&gt;(\n    &amp;'life0 self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,\n    buf: &amp;'life1 mut (impl BufMut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait),\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    Self: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given range into the buffer. <a href=\"common_base/range_read/trait.RangeReader.html#method.read_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_vec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_base/range_read.rs.html#46\">Source</a><a href=\"#method.read_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"common_base/range_read/trait.RangeReader.html#method.read_vec\" class=\"fn\">read_vec</a>&lt;'life0, 'life1, 'async_trait&gt;(\n    &amp;'life0 self,\n    ranges: &amp;'life1 [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;],\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Bytes&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'async_trait&gt;&gt;<div class=\"where\">where\n    'life0: 'async_trait,\n    'life1: 'async_trait,\n    Self: 'async_trait,</div></h4></section></summary><div class='docblock'>Reads the bytes in the given ranges.</div></details></div></details>","RangeReader","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Replacer-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Replacer-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Replacer for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_append\" class=\"method trait-impl\"><a href=\"#method.replace_append\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">replace_append</a>(&amp;mut self, caps: &amp;Captures&lt;'_&gt;, dst: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Appends possibly empty data to <code>dst</code> to replace the current match. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.no_expansion\" class=\"method trait-impl\"><a href=\"#method.no_expansion\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">no_expansion</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;&gt;</h4></section></summary><div class='docblock'>Return a fixed unchanging replacement byte string. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">by_ref</a>&lt;'r&gt;(&amp;'r mut self) -&gt; ReplacerRef&lt;'r, Self&gt;</h4></section></summary><div class='docblock'>Returns a type that implements <code>Replacer</code>, but that borrows and wraps\nthis <code>Replacer</code>. <a>Read more</a></div></details></div></details>","Replacer","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scalar-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/datatypes/scalars.rs.html#248\">Source</a><a href=\"#impl-Scalar-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"datatypes/scalars/trait.Scalar.html\" title=\"trait datatypes::scalars::Scalar\">Scalar</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.VectorType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/scalars.rs.html#249\">Source</a><a href=\"#associatedtype.VectorType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"datatypes/scalars/trait.Scalar.html#associatedtype.VectorType\" class=\"associatedtype\">VectorType</a> = <a class=\"struct\" href=\"datatypes/vectors/binary/struct.BinaryVector.html\" title=\"struct datatypes::vectors::binary::BinaryVector\">BinaryVector</a></h4></section><section id=\"associatedtype.RefType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/scalars.rs.html#250\">Source</a><a href=\"#associatedtype.RefType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"datatypes/scalars/trait.Scalar.html#associatedtype.RefType\" class=\"associatedtype\">RefType</a>&lt;'a&gt; = &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_scalar_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/scalars.rs.html#252\">Source</a><a href=\"#method.as_scalar_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"datatypes/scalars/trait.Scalar.html#tymethod.as_scalar_ref\" class=\"fn\">as_scalar_ref</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Get a reference of the current value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upcast_gat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/scalars.rs.html#256\">Source</a><a href=\"#method.upcast_gat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"datatypes/scalars/trait.Scalar.html#tymethod.upcast_gat\" class=\"fn\">upcast_gat</a>&lt;'short, 'long&gt;(long: &amp;'long [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; &amp;'short [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;short [u8]\">ⓘ</a><div class=\"where\">where\n    'long: 'short,</div></h4></section></summary><div class='docblock'>Upcast GAT type’s lifetime.</div></details></div></details>","Scalar","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; SimplifyContour&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.simplify_contour\" class=\"method trait-impl\"><a href=\"#method.simplify_contour\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">simplify_contour</a>(&amp;mut self, adapter: &amp;FloatPointAdapter&lt;P, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Simplifies the structure in-place if it is not already simple. <a>Read more</a></div></details></div></details>","SimplifyContour<P, T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Code&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.consume\" class=\"method trait-impl\"><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">consume</a>(&amp;mut self, code: Code)</h4></section></summary><div class='docblock'>Consumes a LZ77 encoded <code>Code</code>.</div></details></div></details>","Sink","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26ColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#60\">Source</a><a href=\"#impl-TryFrom%3C%26ColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#61\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"datatypes/error/enum.Error.html\" title=\"enum datatypes::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#63\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;<a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&ColumnDefaultConstraint>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#51\">Source</a><a href=\"#impl-TryFrom%3CColumnDefaultConstraint%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#52\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"datatypes/error/enum.Error.html\" title=\"enum datatypes::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/datatypes/schema/constraint.rs.html#54\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"enum\" href=\"datatypes/schema/constraint/enum.ColumnDefaultConstraint.html\" title=\"enum datatypes::schema::constraint::ColumnDefaultConstraint\">ColumnDefaultConstraint</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<ColumnDefaultConstraint>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CDatanodeStatValue%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#442\">Source</a><a href=\"#impl-TryFrom%3CDatanodeStatValue%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatValue.html\" title=\"struct common_meta::datanode::DatanodeStatValue\">DatanodeStatValue</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#443\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/datanode.rs.html#445\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(stats: <a class=\"struct\" href=\"common_meta/datanode/struct.DatanodeStatValue.html\" title=\"struct common_meta::datanode::DatanodeStatValue\">DatanodeStatValue</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<DatanodeStatValue>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNodeInfo%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#262\">Source</a><a href=\"#impl-TryFrom%3CNodeInfo%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfo.html\" title=\"struct common_meta::cluster::NodeInfo\">NodeInfo</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#263\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/common_meta/cluster.rs.html#265\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(info: <a class=\"struct\" href=\"common_meta/cluster/struct.NodeInfo.html\" title=\"struct common_meta::cluster::NodeInfo\">NodeInfo</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"common_meta/error/enum.Error.html\" title=\"enum common_meta::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<NodeInfo>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CAny%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Type%3CAny%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Type&lt;Any&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; AnyTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;&lt;DB as Database&gt;::TypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Any>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CMySql%3E-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-Type%3CMySql%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Type&lt;MySql&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; MySqlTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;MySqlTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<MySql>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Type&lt;Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: PgHasArrayType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueDeserialize-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueDeserialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueDeserialize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ValueDeserialize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;'de, D&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, DeserializeError&gt;<div class=\"where\">where\n    D: ValueDeserializer&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Attempts to deserialize Self from a given value deserializer.</div></details></div></details>","ValueDeserialize","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueDeserialize-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-ValueDeserialize-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ValueDeserialize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;'de, D&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, DeserializeError&gt;<div class=\"where\">where\n    D: ValueDeserializer&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Attempts to deserialize Self from a given value deserializer.</div></details></div></details>","ValueDeserialize","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueOrd for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Values-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-Values-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; Values for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: Values,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self, mode: Mode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoded values for the given mode.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_encoded\" class=\"method trait-impl\"><a href=\"#method.write_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_encoded</a>&lt;W&gt;(&amp;self, mode: Mode, target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encodes the values in the given mode and writes them to <code>target</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.explicit\" class=\"method trait-impl\"><a href=\"#method.explicit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">explicit</a>(self, tag: Tag) -&gt; Constructed&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Converts the encoder into one with an explicit tag.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_captured\" class=\"method trait-impl\"><a href=\"#method.to_captured\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_captured</a>(&amp;self, mode: Mode) -&gt; Captured</h4></section></summary><div class='docblock'>Captures the encoded values in the given mode.</div></details></div></details>","Values","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Vec%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#480\">Source</a></span><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Write is implemented for <code>Vec&lt;u8&gt;</code> by appending to the vector.\nThe vector will grow as needed.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#482\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#488\">Source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#498\">Source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#503\">Source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#509\">Source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/impls.rs.html#515\">Source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flushes this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1950\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1980-1982\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteBuf for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the valid data part of this container. Should only cover initialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method trait-impl\"><a href=\"#method.capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the full capacity of this container. May include uninitialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method trait-impl\"><a href=\"#method.as_mut_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the start of the data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filled_until\" class=\"method trait-impl\"><a href=\"#method.filled_until\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filled_until</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Indicates that the first <code>n</code> bytes of the container have been written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_from\" class=\"method trait-impl\"><a href=\"#method.write_from\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">write_from</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Call the given closure using the pointer and capacity from <code>self</code>. <a>Read more</a></div></details></div></details>","WriteBuf","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"impl\"><a href=\"#impl-WriteBuf-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteBuf for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the valid data part of this container. Should only cover initialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method trait-impl\"><a href=\"#method.capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the full capacity of this container. May include uninitialized data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method trait-impl\"><a href=\"#method.as_mut_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the start of the data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filled_until\" class=\"method trait-impl\"><a href=\"#method.filled_until\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filled_until</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Indicates that the first <code>n</code> bytes of the container have been written.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_from\" class=\"method trait-impl\"><a href=\"#method.write_from\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">write_from</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ffi/enum.c_void.html\" title=\"enum core::ffi::c_void\">c_void</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Call the given closure using the pointer and capacity from <code>self</code>. <a>Read more</a></div></details></div></details>","WriteBuf","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","index::Bytes"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","index::Bytes"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","index::Bytes"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","index::Bytes"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","index::Bytes"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","index::Bytes"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","index::Bytes"]]],["mito2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Accumulate%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Accumulate%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'i, T&gt; Accumulate&lt;&amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial\" class=\"method trait-impl\"><a href=\"#method.initial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">initial</a>(capacity: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accumulate\" class=\"method trait-impl\"><a href=\"#method.accumulate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accumulate</a>(&amp;mut self, acc: &amp;'i <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","Accumulate<&'i [T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Accumulate%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Accumulate%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Accumulate&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial\" class=\"method trait-impl\"><a href=\"#method.initial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">initial</a>(capacity: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accumulate\" class=\"method trait-impl\"><a href=\"#method.accumulate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accumulate</a>(&amp;mut self, acc: T)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","Accumulate<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BinarySerializable-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-BinarySerializable-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; BinarySerializable for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BinarySerializable,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Serialize</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Deserialize</div></details><section id=\"method.num_bytes\" class=\"method trait-impl\"><a href=\"#method.num_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">num_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></div></details>","BinarySerializable","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T&gt; Decode&lt;'r, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; Decode&lt;'a, Postgres&gt; + Type&lt;Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(value: PgValueRef&lt;'r&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; DecodeValue&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Decode&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q, T&gt; Encode&lt;'q, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: for&lt;'a&gt; Encode&lt;'q, Postgres&gt;,\n    T: Encode&lt;'q, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Postgres>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Encode,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FixedTag for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDaryHeap%3CT,+D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CDaryHeap%3CT,+D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const D: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;DaryHeap&lt;T, D&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: DaryHeap&lt;T, D&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>DaryHeap&lt;T, D&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<DaryHeap<T, D>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SetOfVec&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: SetOfVec&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#223\">Source</a><a href=\"#impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#224\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecStorage<T, R, C>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromParallelIterator&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Collects items from a parallel iterator into a vector.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","FromParallelIterator<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoParallelIterator for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as IntoParallelIterator&gt;::Iter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoParallelIterator&gt;::Iter\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a>Read more</a></div></details></div></details>","IntoParallelIterator","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; OverlayResource&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ResourceIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ResourceIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ResourceIter</a>&lt;'a&gt; = SingleResourceIterator&lt;'a, P&gt;\n<span class=\"where\">where\n    P: 'a,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;: 'a</span></h4></section><section id=\"method.iter_paths\" class=\"method trait-impl\"><a href=\"#method.iter_paths\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_paths</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;&#39;_&gt;\">ⓘ</a></h4></section></div></details>","OverlayResource<P, T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; ParallelExtend&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with copied items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<&'a T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ParallelExtend&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;VecList&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VecList&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VecList<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; SimplifyContour&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.simplify_contour\" class=\"method trait-impl\"><a href=\"#method.simplify_contour\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">simplify_contour</a>(&amp;mut self, adapter: &amp;FloatPointAdapter&lt;P, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Simplifies the structure in-place if it is not already simple. <a>Read more</a></div></details></div></details>","SimplifyContour<P, T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Code&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.consume\" class=\"method trait-impl\"><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">consume</a>(&amp;mut self, code: Code)</h4></section></summary><div class='docblock'>Consumes a LZ77 encoded <code>Code</code>.</div></details></div></details>","Sink","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Source-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Source for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Source + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.clone_into_box\" class=\"method trait-impl\"><a href=\"#method.clone_into_box\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_into_box</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Source + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method trait-impl\"><a href=\"#method.collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, Value&gt;, ConfigError&gt;</h4></section></summary><div class='docblock'>Collect all configuration properties available from this source and return\na Map.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_to\" class=\"method trait-impl\"><a href=\"#method.collect_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">collect_to</a>(&amp;self, cache: &amp;mut Value) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, ConfigError&gt;</h4></section></summary><div class='docblock'>Collects all configuration properties to a provided cache.</div></details></div></details>","Source","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Type&lt;Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: PgHasArrayType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueDeserialize-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueDeserialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueDeserialize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ValueDeserialize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;'de, D&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, DeserializeError&gt;<div class=\"where\">where\n    D: ValueDeserializer&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Attempts to deserialize Self from a given value deserializer.</div></details></div></details>","ValueDeserialize","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueOrd for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Values-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-Values-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; Values for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: Values,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self, mode: Mode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoded values for the given mode.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_encoded\" class=\"method trait-impl\"><a href=\"#method.write_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_encoded</a>&lt;W&gt;(&amp;self, mode: Mode, target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encodes the values in the given mode and writes them to <code>target</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.explicit\" class=\"method trait-impl\"><a href=\"#method.explicit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">explicit</a>(self, tag: Tag) -&gt; Constructed&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Converts the encoder into one with an explicit tag.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_captured\" class=\"method trait-impl\"><a href=\"#method.to_captured\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_captured</a>(&amp;self, mode: Mode) -&gt; Captured</h4></section></summary><div class='docblock'>Captures the encoded values in the given mode.</div></details></div></details>","Values","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteTomlValue-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-WriteTomlValue-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; WriteTomlValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: WriteTomlValue,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.write_toml_value\" class=\"method trait-impl\"><a href=\"#method.write_toml_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_toml_value</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    W: TomlWrite + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></div></details>","WriteTomlValue","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","mito2::read::series_scan::ReceiverList","mito2::worker::RequestBuffer"]]],["servers",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AppendAndGet%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-AppendAndGet%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AppendAndGet&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.append_and_get\" class=\"method trait-impl\"><a href=\"#method.append_and_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">append_and_get</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></div></details>","AppendAndGet<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Element</a> = T</h4></section></summary><div class='docblock'>Elements of the array</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method trait-impl\"><a href=\"#method.pop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns the last element of the array or <code>None</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method trait-impl\"><a href=\"#method.push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push</a>(&amp;mut self, e: T)</h4></section></summary><div class='docblock'>Appends e to the end of the <code>Array</code></div></details></div></details>","ArrayMut","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayTrait-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayTrait-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Array for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Element</a> = T</h4></section></summary><div class='docblock'>Elements of the array</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method trait-impl\"><a href=\"#method.iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; + '_&gt;</h4></section></summary><div class='docblock'>Iterates over the values paris</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Number of key/value pairs</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns if the array is empty</div></details></div></details>","Array","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsSelf%3C'slf%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-AsSelf%3C'slf%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'slf, T&gt; AsSelf&lt;'slf&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsSelf&lt;'slf&gt;,\n    &lt;T as AsSelf&lt;'slf&gt;&gt;::Ref: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ref\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ref\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Ref</a> = [&lt;T as AsSelf&lt;'slf&gt;&gt;::Ref]</h4></section></summary><div class='docblock'>The <code>Self</code> type with <code>'slf</code> lifetimes, returned by <code>as_self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_self\" class=\"method trait-impl\"><a href=\"#method.as_self\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_self</a>(&amp;'slf self) -&gt; &amp;'slf &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as AsSelf&lt;'slf&gt;&gt;::Ref <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;slf &lt;Vec&lt;T&gt; as AsSelf&lt;&#39;slf&gt;&gt;::Ref\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a reference to <code>self</code> with downcasted lifetime.</div></details></div></details>","AsSelf<'slf>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/servers/repeated_field.rs.html#61-65\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"servers/repeated_field/trait.Clear.html\" title=\"trait servers::repeated_field::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/servers/repeated_field.rs.html#62-64\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"servers/repeated_field/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T&gt; Decode&lt;'r, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; Decode&lt;'a, Postgres&gt; + Type&lt;Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(value: PgValueRef&lt;'r&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; DecodeValue&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Decode&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q, T&gt; Encode&lt;'q, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: for&lt;'a&gt; Encode&lt;'q, Postgres&gt;,\n    T: Encode&lt;'q, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Postgres>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Encode,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FixedTag for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COneOrMany%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/servers/http/opentsdb.rs.html#38-45\">Source</a><a href=\"#impl-From%3COneOrMany%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"servers/http/opentsdb/enum.OneOrMany.html\" title=\"enum servers::http::opentsdb::OneOrMany\">OneOrMany</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/servers/http/opentsdb.rs.html#39-44\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(from: <a class=\"enum\" href=\"servers/http/opentsdb/enum.OneOrMany.html\" title=\"enum servers::http::opentsdb::OneOrMany\">OneOrMany</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<OneOrMany<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CRepeatedField%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/servers/repeated_field.rs.html#345-350\">Source</a><a href=\"#impl-From%3CRepeatedField%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"servers/repeated_field/struct.RepeatedField.html\" title=\"struct servers::repeated_field::RepeatedField\">RepeatedField</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/servers/repeated_field.rs.html#347-349\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: <a class=\"struct\" href=\"servers/repeated_field/struct.RepeatedField.html\" title=\"struct servers::repeated_field::RepeatedField\">RepeatedField</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<RepeatedField<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SetOfVec&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: SetOfVec&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#223\">Source</a><a href=\"#impl-From%3CVecStorage%3CT,+R,+C%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/nalgebra/0.25.0/src/nalgebra/base/vec_storage.rs.html#224\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://docs.rs/nalgebra/0.25.0/nalgebra/base/vec_storage/struct.VecStorage.html\" title=\"struct nalgebra::base::vec_storage::VecStorage\">VecStorage</a>&lt;T, R, C&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecStorage<T, R, C>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytesWithInput%3C'lt%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromBytesWithInput%3C'lt%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'lt, T&gt; FromBytesWithInput&lt;'lt&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromBytes&lt;'lt&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Input\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Input\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Input</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The type of the additional input.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bytes_with_input\" class=\"method trait-impl\"><a href=\"#method.from_bytes_with_input\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bytes_with_input</a>(\n    buffer: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/cursor/struct.Cursor.html\" title=\"struct std::io::cursor::Cursor\">Cursor</a>&lt;&amp;'lt [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n    input: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as FromBytesWithInput&lt;'lt&gt;&gt;::Input,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, DeError&gt;</h4></section></summary><div class='docblock'>Takes a byte buffer and an additional input and returns\nthe deserialized data structure.</div></details></div></details>","FromBytesWithInput<'lt>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromParallelIterator&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Collects items from a parallel iterator into a vector.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","FromParallelIterator<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Indexed%3CI%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Indexed%3CI%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; Indexed&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Element</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Elements of the array</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get</a>(&amp;self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Indexed&lt;I&gt;&gt;::Element&gt;</h4></section></summary><div class='docblock'>Gets a ref to a value based on n index, returns <code>None</code> if the\ncurrent Value isn’t an Array or doesn’t contain the index\nit was asked for.</div></details></div></details>","Indexed<I>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexedMut%3CI%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexedMut%3CI%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; IndexedMut&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Element</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Elements of the array</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_mut</a>(&amp;mut self, i: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as IndexedMut&lt;I&gt;&gt;::Element&gt;</h4></section></summary><div class='docblock'>Gets a ref to a value based on n index, returns <code>None</code> if the\ncurrent Value isn’t an Array or doesn’t contain the index\nit was asked for.</div></details></div></details>","IndexedMut<I>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoParallelIterator for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as IntoParallelIterator&gt;::Iter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoParallelIterator&gt;::Iter\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a>Read more</a></div></details></div></details>","IntoParallelIterator","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Monoid-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Monoid-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Monoid for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method trait-impl\"><a href=\"#method.empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">empty</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>For a given Monoid, returns its empty/zero value <a>Read more</a></div></details></div></details>","Monoid","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-OverlayResource%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; OverlayResource&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ResourceIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ResourceIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ResourceIter</a>&lt;'a&gt; = SingleResourceIterator&lt;'a, P&gt;\n<span class=\"where\">where\n    P: 'a,\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;: 'a</span></h4></section><section id=\"method.iter_paths\" class=\"method trait-impl\"><a href=\"#method.iter_paths\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_paths</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;P&gt; as OverlayResource&lt;P, T&gt;&gt;::ResourceIter&lt;&#39;_&gt;\">ⓘ</a></h4></section></div></details>","OverlayResource<P, T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3C%26T%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; ParallelExtend&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with copied items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<&'a T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ParallelExtend%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ParallelExtend&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3><div class=\"docblock\"><p>Extends a vector with items from a parallel iterator.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.par_extend\" class=\"method trait-impl\"><a href=\"#method.par_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">par_extend</a>&lt;I&gt;(&amp;mut self, par_iter: I)<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends an instance of the collection with the elements drawn\nfrom the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","ParallelExtend<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;VecList&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VecList&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VecList<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Semigroup-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Semigroup-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Semigroup for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine\" class=\"method trait-impl\"><a href=\"#method.combine\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">combine</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Associative operation taking which combines two values. <a>Read more</a></div></details></div></details>","Semigroup","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-SimplifyContour%3CP,+T%3E-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; SimplifyContour&lt;P, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: FloatPointCompatible&lt;T&gt;,\n    T: FloatNumber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.simplify_contour\" class=\"method trait-impl\"><a href=\"#method.simplify_contour\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">simplify_contour</a>(&amp;mut self, adapter: &amp;FloatPointAdapter&lt;P, T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Simplifies the structure in-place if it is not already simple. <a>Read more</a></div></details></div></details>","SimplifyContour<P, T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Size-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Size-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Size for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Size,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.unpadded_size\" class=\"method trait-impl\"><a href=\"#method.unpadded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unpadded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Size of the unpadded data structure. This will usually\nonly be unaligned for variable length types like\nstrings or byte buffers.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.padded_size\" class=\"method trait-impl\"><a href=\"#method.padded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">padded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Get the size of of the payload and align it to\nthe required netlink byte alignment.</div></details></div></details>","Size","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToBytes-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToBytes for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToBytes,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bytes\" class=\"method trait-impl\"><a href=\"#method.to_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_bytes</a>(&amp;self, buffer: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/cursor/struct.Cursor.html\" title=\"struct std::io::cursor::Cursor\">Cursor</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerError&gt;</h4></section></summary><div class='docblock'>Takes a byte buffer and serializes the data structure into\nit.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pad\" class=\"method trait-impl\"><a href=\"#method.pad\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pad</a>(&amp;self, buffer: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/cursor/struct.Cursor.html\" title=\"struct std::io::cursor::Cursor\">Cursor</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerError&gt;</h4></section></summary><div class='docblock'>Pad a netlink message to the appropriate alignment.</div></details></div></details>","ToBytes","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSqlText-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSqlText-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSqlText for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSqlText,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_text\" class=\"method trait-impl\"><a href=\"#method.to_sql_text\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_text</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts value to text format of Postgres type. <a>Read more</a></div></details></div></details>","ToSqlText","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Type&lt;Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: PgHasArrayType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnsizedCopyFrom-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-UnsizedCopyFrom-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; UnsizedCopyFrom for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: UnsizedCopy,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Source\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Source\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Source</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The source type to copy from.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsized_copy_from\" class=\"method trait-impl\"><a href=\"#method.unsized_copy_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unsized_copy_from</a>(value: &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as UnsizedCopyFrom&gt;::Source) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Create a new <code>Self</code> by copying the given value.</div></details></div></details>","UnsizedCopyFrom","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueOrd for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Values-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-Values-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; Values for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: Values,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self, mode: Mode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoded values for the given mode.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_encoded\" class=\"method trait-impl\"><a href=\"#method.write_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_encoded</a>&lt;W&gt;(&amp;self, mode: Mode, target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encodes the values in the given mode and writes them to <code>target</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.explicit\" class=\"method trait-impl\"><a href=\"#method.explicit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">explicit</a>(self, tag: Tag) -&gt; Constructed&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Converts the encoder into one with an explicit tag.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_captured\" class=\"method trait-impl\"><a href=\"#method.to_captured\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_captured</a>(&amp;self, mode: Mode) -&gt; Captured</h4></section></summary><div class='docblock'>Captures the encoded values in the given mode.</div></details></div></details>","Values","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","servers::otlp::trace::span::TraceSpans"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","servers::otlp::trace::span::TraceSpans"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","servers::otlp::trace::span::TraceSpans"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","servers::otlp::trace::span::TraceSpans"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","servers::otlp::trace::span::TraceSpans"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","servers::otlp::trace::span::TraceSpans"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","servers::otlp::trace::span::TraceSpans"]]],["store_api",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+BTreeMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#613\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+BTreeMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, K, KAs, V, VAs&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(KAs, VAs)</a>&gt;<div class=\"where\">where\n    KAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, K&gt;,\n    VAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, V&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#613\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, BTreeMap<K, V>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+HashMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#613\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+HashMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, K, KAs, V, VAs&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(KAs, VAs)</a>&gt;<div class=\"where\">where\n    KAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, K&gt;,\n    VAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, V&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#613\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, HashMap<K, V>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CBTreeMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#380\">Source</a><a href=\"#impl-SerializeAs%3CBTreeMap%3CK,+V%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, KAs, V, VAs&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(KAs, VAs)</a>&gt;<div class=\"where\">where\n    KAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;K&gt;,\n    VAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;V&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#380\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;K, V&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<BTreeMap<K, V>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CHashMap%3CK,+V,+H%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#380\">Source</a><a href=\"#impl-SerializeAs%3CHashMap%3CK,+V,+H%3E%3E-for-Vec%3C(KAs,+VAs)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, KAs, V, VAs, H&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, H&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(KAs, VAs)</a>&gt;<div class=\"where\">where\n    KAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;K&gt;,\n    VAs: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;V&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#380\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, V, H&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<HashMap<K, V, H>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Store%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-Store%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; Store&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_len\" class=\"method trait-impl\"><a href=\"#method.lm_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of elements in the store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_is_empty\" class=\"method trait-impl\"><a href=\"#method.lm_is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns whether the store is empty (contains 0 elements).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_get\" class=\"method trait-impl\"><a href=\"#method.lm_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_get</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets a key/value pair at the specified index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_last\" class=\"method trait-impl\"><a href=\"#method.lm_last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class='docblock'>Gets the last element in the store, or <code>None</code> if the store is empty.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_binary_search_by\" class=\"method trait-impl\"><a href=\"#method.lm_binary_search_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_binary_search_by</a>&lt;F&gt;(&amp;self, cmp: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class='docblock'>Searches the store for a particular element with a comparator function. <a>Read more</a></div></details></div></details>","Store<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreBulkMut%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreBulkMut%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreBulkMut&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_extend\" class=\"method trait-impl\"><a href=\"#method.lm_extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Extends this store with items from an iterator.</p>\n<p>It uses a two-pass (sort + dedup) approach to avoid any potential quadratic costs.</p>\n<p>The asymptotic worst case complexity is O((n + m) log(n + m)), where <code>n</code>\nis the number of elements already in <code>self</code> and <code>m</code> is the number of elements\nin the iterator. The best case complexity is O(m), when the input iterator is\nalready sorted, keys aren’t duplicated and all keys sort after the existing ones.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_retain\" class=\"method trait-impl\"><a href=\"#method.lm_retain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_retain</a>&lt;F&gt;(&amp;mut self, predicate: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Retains items satisfying a predicate in this store.</div></details></div></details>","StoreBulkMut<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreConstEmpty%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreConstEmpty%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreConstEmpty&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EMPTY</a>: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class='docblock'>An empty store</div></details></div></details>","StoreConstEmpty<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreFromIterable%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreFromIterable%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreFromIterable&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_sort_from_iter\" class=\"method trait-impl\"><a href=\"#method.lm_sort_from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_sort_from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Create a sorted store from <code>iter</code>.</div></details></div></details>","StoreFromIterable<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreIntoIterator%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreIntoIterator%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreIntoIterator&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.KeyValueIntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.KeyValueIntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">KeyValueIntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_into_iter\" class=\"method trait-impl\"><a href=\"#method.lm_into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_into_iter</a>(\n    self,\n) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; as StoreIntoIterator&lt;K, V&gt;&gt;::KeyValueIntoIter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;(K, V)&gt; as StoreIntoIterator&lt;K, V&gt;&gt;::KeyValueIntoIter\">ⓘ</a></h4></section></summary><div class='docblock'>Returns an iterator that moves every item from this store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_extend_end\" class=\"method trait-impl\"><a href=\"#method.lm_extend_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_extend_end</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;)</h4></section></summary><div class='docblock'>Adds items from another store to the end of this store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_extend_start\" class=\"method trait-impl\"><a href=\"#method.lm_extend_start\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_extend_start</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;)</h4></section></summary><div class='docblock'>Adds items from another store to the beginning of this store.</div></details></div></details>","StoreIntoIterator<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreIterable%3C'a,+K,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreIterable%3C'a,+K,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; StoreIterable&lt;'a, K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.KeyValueIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.KeyValueIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">KeyValueIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/map/struct.Map.html\" title=\"struct core::iter::adapters::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_iter\" class=\"method trait-impl\"><a href=\"#method.lm_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_iter</a>(&amp;'a self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; as StoreIterable&lt;'a, K, V&gt;&gt;::KeyValueIter <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;(K, V)&gt; as StoreIterable&lt;&#39;a, K, V&gt;&gt;::KeyValueIter\">ⓘ</a></h4></section></summary><div class='docblock'>Returns an iterator over key/value pairs.</div></details></div></details>","StoreIterable<'a, K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreIterableMut%3C'a,+K,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreIterableMut%3C'a,+K,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; StoreIterableMut&lt;'a, K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.KeyValueIterMut\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.KeyValueIterMut\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">KeyValueIterMut</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/map/struct.Map.html\" title=\"struct core::iter::adapters::map::Map\">Map</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.IterMut.html\" title=\"struct core::slice::iter::IterMut\">IterMut</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_iter_mut\" class=\"method trait-impl\"><a href=\"#method.lm_iter_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_iter_mut</a>(\n    &amp;'a mut self,\n) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; as StoreIterableMut&lt;'a, K, V&gt;&gt;::KeyValueIterMut <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;(K, V)&gt; as StoreIterableMut&lt;&#39;a, K, V&gt;&gt;::KeyValueIterMut\">ⓘ</a></h4></section></summary><div class='docblock'>Returns an iterator over key/value pairs, with a mutable value.</div></details></div></details>","StoreIterableMut<'a, K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreMut%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreMut%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreMut&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_with_capacity\" class=\"method trait-impl\"><a href=\"#method.lm_with_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class='docblock'>Creates a new store with the specified capacity hint. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_reserve\" class=\"method trait-impl\"><a href=\"#method.lm_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Reserves additional capacity in the store. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_get_mut\" class=\"method trait-impl\"><a href=\"#method.lm_get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_get_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class='docblock'>Gets a key/value pair at the specified index, with a mutable value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_push\" class=\"method trait-impl\"><a href=\"#method.lm_push\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_push</a>(&amp;mut self, key: K, value: V)</h4></section></summary><div class='docblock'>Pushes one additional item onto the store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_insert\" class=\"method trait-impl\"><a href=\"#method.lm_insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, key: K, value: V)</h4></section></summary><div class='docblock'>Inserts an item at a specific index in the store. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_remove\" class=\"method trait-impl\"><a href=\"#method.lm_remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>Removes an item at a specific index in the store. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lm_clear\" class=\"method trait-impl\"><a href=\"#method.lm_clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Removes all items from the store.</div></details></div></details>","StoreMut<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreSlice%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreSlice%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreSlice&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>]</h4></section><section id=\"method.lm_get_range\" class=\"method trait-impl\"><a href=\"#method.lm_get_range\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lm_get_range</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; as StoreSlice&lt;K, V&gt;&gt;::Slice&gt;</h4></section></div></details>","StoreSlice<K, V>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","store_api::region_engine::BatchResponses"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","store_api::region_engine::BatchResponses"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","store_api::region_engine::BatchResponses"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","store_api::region_engine::BatchResponses"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","store_api::region_engine::BatchResponses"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","store_api::region_engine::BatchResponses"],["<section id=\"impl-StoreFromIterator%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"impl\"><a href=\"#impl-StoreFromIterator%3CK,+V%3E-for-Vec%3C(K,+V)%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; StoreFromIterator&lt;K, V&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;</h3></section>","StoreFromIterator<K, V>","store_api::region_engine::BatchResponses"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","store_api::region_engine::BatchResponses"]]],["tests_fuzz",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayLike-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ArrayLike-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ArrayLike for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>Type of the elements being stored.</div></details></div></details>","ArrayLike","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4093\">Source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4094\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4079\">Source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4080\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<Vec<T, A>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4086\">Source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4087\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4072\">Source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4073\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<Vec<T, A>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CZeroSlice%3CT%3E%3E-for-Vec%3C%3CT+as+AsULE%3E::ULE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as AsULE&gt;::ULE&gt;<div class=\"where\">where\n    T: AsULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;ZeroSlice&lt;T&gt;</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<ZeroSlice<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#787\">Source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#788\">Source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#794\">Source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/slice.rs.html#795\">Source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#45\">Source</a><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html\" title=\"trait sharded_slab::clear::Clear\">Clear</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/sharded-slab/0.1.4/src/sharded_slab/clear.rs.html#47\">Source</a><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/sharded-slab/0.1.4/sharded_slab/clear/trait.Clear.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear all data in <code>self</code>, retaining the allocated capacithy.</div></details></div></details>","Clear","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clear-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Clear-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clear for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method trait-impl\"><a href=\"#method.clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Clear this make, make it equivalent to newly created object.</div></details></div></details>","Clear","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3570\">Source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3598\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3571\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataFilePaths-for-Vec%3CP%3E\" class=\"impl\"><a href=\"#impl-DataFilePaths-for-Vec%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; DataFilePaths for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_urls\" class=\"method trait-impl\"><a href=\"#method.to_urls\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_urls</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ListingTableUrl&gt;, DataFusionError&gt;</h4></section></summary><div class='docblock'>Parse to a vector of [<code>ListingTableUrl</code>] URLs.</div></details></div></details>","DataFilePaths","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4065\">Source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4066\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DebugSecret-for-Vec%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/secrecy/0.8.0/src/secrecy/vec.rs.html#12\">Source</a><a href=\"#impl-DebugSecret-for-Vec%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.DebugSecret.html\" title=\"trait secrecy::DebugSecret\">DebugSecret</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.DebugSecret.html\" title=\"trait secrecy::DebugSecret\">DebugSecret</a> + Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.debug_secret\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/secrecy/0.8.0/src/secrecy/lib.rs.html#216\">Source</a><a href=\"#method.debug_secret\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.DebugSecret.html#method.debug_secret\" class=\"fn\">debug_secret</a>(f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Format information about the secret’s type. <a href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.DebugSecret.html#method.debug_secret\">Read more</a></div></details></div></details>","DebugSecret","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Decode%3C'r,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'r, T&gt; Decode&lt;'r, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; Decode&lt;'a, Postgres&gt; + Type&lt;Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(value: PgValueRef&lt;'r&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Decode a new value of this type using a raw value from the database.</div></details></div></details>","Decode<'r, Postgres>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; DecodeValue&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Decode&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4055\">Source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4059\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details>","Default","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3558\">Source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3560\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1146-1148\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#1150-1152\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#impl-DeserializeAs%3C'de,+Vec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/de/impls.rs.html#424\">Source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Vec<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4041\">Source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4042\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Encode%3C'q,+Postgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'q, T&gt; Encode&lt;'q, Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: for&lt;'a&gt; Encode&lt;'q, Postgres&gt;,\n    T: Encode&lt;'q, Postgres&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_by_ref\" class=\"method trait-impl\"><a href=\"#method.encode_by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_by_ref</a>(\n    &amp;self,\n    buf: &amp;mut PgArgumentBuffer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> without moving <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(\n    self,\n    buf: &amp;mut &lt;DB as Database&gt;::ArgumentBuffer&lt;'q&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes the value of <code>self</code> into <code>buf</code> in the expected format for the database.</div></details><section id=\"method.produces\" class=\"method trait-impl\"><a href=\"#method.produces\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">produces</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DB as Database&gt;::TypeInfo&gt;</h4></section><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","Encode<'q, Postgres>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3C%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ULE,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, cb: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CVarZeroSlice%3CT,+F%3E%3E-for-Vec%3CE%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; EncodeAsVarULE&lt;VarZeroSlice&lt;T, F&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E&gt;<div class=\"where\">where\n    T: VarULE + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    E: EncodeAsVarULE&lt;T&gt;,\n    F: VarZeroVecFormat,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<VarZeroSlice<T, F>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeAsVarULE%3CZeroSlice%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeAsVarULE&lt;ZeroSlice&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: AsULE + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_as_slices\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_as_slices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_as_slices</a>&lt;R&gt;(&amp;self, _: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;[&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]]) -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Calls <code>cb</code> with a piecewise list of byte slices that when concatenated\nproduce the memory pattern of the corresponding instance of <code>T</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_len\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the length, in bytes, of the corresponding [<code>VarULE</code>] type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_var_ule_write\" class=\"method trait-impl\"><a href=\"#method.encode_var_ule_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_var_ule_write</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write the corresponding [<code>VarULE</code>] type to the <code>dst</code> buffer. <code>dst</code> should\nbe the size of [<code>Self::encode_var_ule_len()</code>]</div></details></div></details>","EncodeAsVarULE<ZeroSlice<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-EncodeValue-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; EncodeValue for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Encode,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3988\">Source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n</div></section></summary><div class=\"docblock\"><p>This implementation is specialized for slice iterators, where it uses <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3989\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3994\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3999\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3754\">Source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3756\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3761\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3766\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FixedTag-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FixedTag for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Sequence</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4101\">Source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4109\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4131\">Source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&[T; N]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4116\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4124\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4146\">Source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4154\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<&mut [T; N]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4161\">Source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4169\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<[T; N]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1886\">Source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/binary_heap/mod.rs.html#1891\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::collections::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details>","From<BinaryHeap<T, A>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4200\">Source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4210\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details></div></details>","From<Box<[T], A>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4175-4177\">Source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/trait.ToOwned.html\" title=\"trait alloc::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4193\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre></div></div></details></div></details>","From<Cow<'a, [T]>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ScalarBuffer&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ScalarBuffer<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CSetOfVec%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SetOfVec&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(set: SetOfVec&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SetOfVec<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"impl\"><a href=\"#impl-From%3CVec1%3CI%3E%3E-for-Vec%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Vec1&lt;I&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: Vec1&lt;I&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;I&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec1<I>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVecBuilder%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VecBuilder&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(builder: VecBuilder&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VecBuilder<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3197\">Source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/collections/vec_deque/mod.rs.html#3227\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre></div></div></details></div></details>","From<VecDeque<T, A>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1064\">Source</a><a href=\"#impl-FromFallibleIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html\" title=\"trait fallible_iterator::FromFallibleIterator\">FromFallibleIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_fallible_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/fallible-iterator/0.2/src/fallible_iterator/lib.rs.html#1066-1068\">Source</a><a href=\"#method.from_fallible_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.FromFallibleIterator.html#tymethod.from_fallible_iter\" class=\"fn\">from_fallible_iter</a>&lt;I&gt;(\n    it: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, &lt;I as <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html#associatedtype.Error\" title=\"type fallible_iterator::IntoFallibleIterator::Error\">Error</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://docs.rs/fallible-iterator/0.2/fallible_iterator/trait.IntoFallibleIterator.html\" title=\"trait fallible_iterator::IntoFallibleIterator\">IntoFallibleIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from a fallible iterator.</div></details></div></details>","FromFallibleIterator<T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3686\">Source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.collect\" title=\"method core::iter::traits::iterator::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to\" title=\"method alloc::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3688\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromSql%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; FromSql&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: FromSql&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql\" class=\"method trait-impl\"><a href=\"#method.from_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql</a>(\n    ty: &amp;Type,\n    raw: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a buffer of data of the specified\nPostgres <code>Type</code> in its binary format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be created from the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_null\" class=\"method trait-impl\"><a href=\"#method.from_sql_null\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_null</a>(ty: &amp;Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Creates a new value of this type from a <code>NULL</code> SQL value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sql_nullable\" class=\"method trait-impl\"><a href=\"#method.from_sql_nullable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sql_nullable</a>(\n    ty: &amp;Type,\n    raw: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>A convenience function that delegates to <code>from_sql</code> and <code>from_sql_null</code> depending on the\nvalue of <code>raw</code>.</div></details></div></details>","FromSql<'a>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3615\">Source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3617\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3623\">Source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3624\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3627\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<PatternID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<SmallIndex>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Index%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<StateID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3633\">Source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3635\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut &lt;Vec&lt;T, A&gt; as Index&lt;I&gt;&gt;::Output\">ⓘ</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CPatternID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;PatternID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: PatternID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<PatternID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CSmallIndex%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;SmallIndex&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: SmallIndex) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<SmallIndex>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CStateID%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;StateID&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: StateID) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<StateID>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1136-1139\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1141\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#1143\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" title=\"type serde::de::IntoDeserializer::Deserializer\">Deserializer</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T&gt; as IntoDeserializer&lt;&#39;de, E&gt;&gt;::Deserializer\">ⓘ</a></h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3694\">Source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3715\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;Vec&lt;T, A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3695\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3696\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-JsonSchema-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; JsonSchema for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: JsonSchema,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(generator: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details></div></details>","JsonSchema","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"impl\"><a href=\"#impl-Layer%3CS%3E-for-Vec%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, L&gt; Layer&lt;S&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;L&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    S: Subscriber,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_layer\" class=\"method trait-impl\"><a href=\"#method.on_layer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_layer</a>(&amp;mut self, subscriber: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>)</h4></section></summary><div class='docblock'>Performs late initialization when attaching a <code>Layer</code> to a\n[<code>Subscriber</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_callsite\" class=\"method trait-impl\"><a href=\"#method.register_callsite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">register_callsite</a>(&amp;self, metadata: &amp;'static Metadata&lt;'static&gt;) -&gt; Interest</h4></section></summary><div class='docblock'>Registers a new callsite with this layer, returning whether or not\nthe layer is interested in being notified about the callsite, similarly\nto <a href=\"tracing_core::Subscriber::register_callsite()\"><code>Subscriber::register_callsite</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enabled\" class=\"method trait-impl\"><a href=\"#method.enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enabled</a>(&amp;self, metadata: &amp;Metadata&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this layer is interested in a span or event with the\ngiven <code>metadata</code> in the current [<code>Context</code>], similarly to\n<a href=\"tracing_core::Subscriber::enabled()\"><code>Subscriber::enabled</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.event_enabled\" class=\"method trait-impl\"><a href=\"#method.event_enabled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">event_enabled</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called before <a href=\"Self::on_event\"><code>on_event</code></a>, to determine if <code>on_event</code> should be called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_new_span\" class=\"method trait-impl\"><a href=\"#method.on_new_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_new_span</a>(&amp;self, attrs: &amp;Attributes&lt;'_&gt;, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a new span was constructed with the given\n<code>Attributes</code> and <code>Id</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_record\" class=\"method trait-impl\"><a href=\"#method.on_record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_record</a>(&amp;self, span: &amp;Id, values: &amp;Record&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given <code>Id</code> recorded the given\n<code>values</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_follows_from\" class=\"method trait-impl\"><a href=\"#method.on_follows_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_follows_from</a>(&amp;self, span: &amp;Id, follows: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the ID <code>span</code> recorded that it\nfollows from the span with the ID <code>follows</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_event\" class=\"method trait-impl\"><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_event</a>(&amp;self, event: &amp;Event&lt;'_&gt;, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that an event has occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_enter\" class=\"method trait-impl\"><a href=\"#method.on_enter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_enter</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span with the given ID was entered.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_exit\" class=\"method trait-impl\"><a href=\"#method.on_exit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_exit</a>(&amp;self, id: &amp;Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID was exited.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_close\" class=\"method trait-impl\"><a href=\"#method.on_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_close</a>(&amp;self, id: Id, ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that the span with the given ID has been closed.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_register_dispatch\" class=\"method trait-impl\"><a href=\"#method.on_register_dispatch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_register_dispatch</a>(&amp;self, subscriber: &amp;Dispatch)</h4></section></summary><div class='docblock'>Performs late initialization when installing this layer as a\n<a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_id_change\" class=\"method trait-impl\"><a href=\"#method.on_id_change\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">on_id_change</a>(&amp;self, _old: &amp;Id, _new: &amp;Id, _ctx: Context&lt;'_, S&gt;)</h4></section></summary><div class='docblock'>Notifies this layer that a span ID has been cloned, and that the\nsubscriber returned a different ID.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method trait-impl\"><a href=\"#method.and_then\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_then</a>&lt;L&gt;(self, layer: L) -&gt; Layered&lt;L, Self, S&gt;<div class=\"where\">where\n    L: Layer&lt;S&gt;,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this layer around the given <code>Layer</code>, returning a <code>Layered</code>\nstruct implementing <code>Layer</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_subscriber\" class=\"method trait-impl\"><a href=\"#method.with_subscriber\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_subscriber</a>(self, inner: S) -&gt; Layered&lt;Self, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Composes this <code>Layer</code> with the given <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>, returning a\n<code>Layered</code> struct that implements <a href=\"tracing_core::Subscriber\"><code>Subscriber</code></a>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_filter\" class=\"method trait-impl\"><a href=\"#method.with_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">with_filter</a>&lt;F&gt;(self, filter: F) -&gt; Filtered&lt;Self, F, S&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: Filter&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Combines <code>self</code> with a [<code>Filter</code>], returning a <a href=\"crate::filter::Filtered\"><code>Filtered</code></a> layer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.boxed\" class=\"method trait-impl\"><a href=\"#method.boxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">boxed</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + Layer&lt;S&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    S: Subscriber,</div></h4></section></summary><div class='docblock'>Erases the type of this [<code>Layer</code>], returning a <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a>ed <code>dyn Layer</code> trait object. <a>Read more</a></div></details></div></details>","Layer<S>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4033\">Source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4035\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#23\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#36\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[U; N]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#24\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [U]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#27\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#35\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<[U; N]>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CScalarBuffer%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;ScalarBuffer&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ArrowNativeType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;ScalarBuffer&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<ScalarBuffer<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/partial_eq.rs.html#22\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<U, A2>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CVecList%3CT%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;VecList&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;VecList&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<VecList<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4016-4020\">Source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait core::cmp::Ord\">lexicographically</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4023\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Vec<T, A2>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#impl-Serialize-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#257-261\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#impl-SerializeAs%3CVec%3CT%3E%3E-for-Vec%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.1.0/src/serde_with/ser/impls.rs.html#289\">Source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.1.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Vec<T>>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Sink%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sink&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of value produced by the sink when an error occurs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_ready\" class=\"method trait-impl\"><a href=\"#method.poll_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_ready</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Attempts to prepare the <code>Sink</code> to receive a value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_send\" class=\"method trait-impl\"><a href=\"#method.start_send\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_send</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    item: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Begin the process of sending a value to the sink.\nEach call to this function must be preceded by a successful call to\n<code>poll_ready</code> which returned <code>Poll::Ready(Ok(()))</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output from this sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,\n    _: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Sink&lt;T&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Flush any remaining output and close this sink, if necessary. <a>Read more</a></div></details></div></details>","Sink<T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSql-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ToSql-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToSql for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: ToSql,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql\" class=\"method trait-impl\"><a href=\"#method.to_sql\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql</a>(\n    &amp;self,\n    ty: &amp;Type,\n    w: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> into the binary format of the specified\nPostgres <code>Type</code>, appending it to <code>out</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accepts\" class=\"method trait-impl\"><a href=\"#method.accepts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">accepts</a>(ty: &amp;Type) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if a value of this type can be converted to the specified\nPostgres <code>Type</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sql_checked\" class=\"method trait-impl\"><a href=\"#method.to_sql_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sql_checked</a>(\n    &amp;self,\n    ty: &amp;Type,\n    out: &amp;mut BytesMut,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IsNull, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>&gt;&gt;</h4></section></summary><div class='docblock'>An adaptor method used internally by Rust-Postgres. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_format\" class=\"method trait-impl\"><a href=\"#method.encode_format\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_format</a>(&amp;self, _ty: &amp;Type) -&gt; Format</h4></section></summary><div class='docblock'>Specify the encode format</div></details></div></details>","ToSql","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"impl\"><a href=\"#impl-TreeNodeContainer%3C'a,+T%3E-for-Vec%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C&gt; TreeNodeContainer&lt;'a, T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;<div class=\"where\">where\n    T: 'a,\n    C: TreeNodeContainer&lt;'a, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_elements\" class=\"method trait-impl\"><a href=\"#method.apply_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply_elements</a>&lt;F&gt;(\n    &amp;'a self,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TreeNodeRecursion, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Applies <code>f</code> to all elements of the container.\nThis method is usually called from [<code>TreeNode::apply_children</code>] implementations as\na node is actually a container of the node’s children.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_elements\" class=\"method trait-impl\"><a href=\"#method.map_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_elements</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;C&gt;&gt;, DataFusionError&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Transformed&lt;T&gt;, DataFusionError&gt;,</div></h4></section></summary><div class='docblock'>Maps all elements of the container with <code>f</code>.\nThis method is usually called from [<code>TreeNode::map_children</code>] implementations as\na node is actually a container of the node’s children.</div></details></div></details>","TreeNodeContainer<'a, T>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Type%3CPostgres%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Type&lt;Postgres&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: PgHasArrayType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_info\" class=\"method trait-impl\"><a href=\"#method.type_info\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">type_info</a>() -&gt; PgTypeInfo</h4></section></summary><div class='docblock'>Returns the canonical SQL type for this Rust type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compatible\" class=\"method trait-impl\"><a href=\"#method.compatible\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compatible</a>(ty: &amp;PgTypeInfo) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines if this Rust type is compatible with the given SQL type. <a>Read more</a></div></details></div></details>","Type<Postgres>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueOrd-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ValueOrd for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: DerOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Values-for-Vec%3CV%3E\" class=\"impl\"><a href=\"#impl-Values-for-Vec%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;V&gt; Values for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;<div class=\"where\">where\n    V: Values,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded_len\" class=\"method trait-impl\"><a href=\"#method.encoded_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encoded_len</a>(&amp;self, mode: Mode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoded values for the given mode.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_encoded\" class=\"method trait-impl\"><a href=\"#method.write_encoded\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_encoded</a>&lt;W&gt;(&amp;self, mode: Mode, target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Encodes the values in the given mode and writes them to <code>target</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.explicit\" class=\"method trait-impl\"><a href=\"#method.explicit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">explicit</a>(self, tag: Tag) -&gt; Constructed&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Converts the encoder into one with an explicit tag.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_captured\" class=\"method trait-impl\"><a href=\"#method.to_captured\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_captured</a>(&amp;self, mode: Mode) -&gt; Captured</h4></section></summary><div class='docblock'>Captures the encoded values in the given mode.</div></details></div></details>","Values","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#443\">Source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#459\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#518\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#646\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li>If <code>T</code> is not a zero-sized type and the capacity is nonzero, <code>ptr</code> must have\nbeen allocated using the global allocator, such as via the <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a>\nfunction. If <code>T</code> is a zero-sized type or the capacity is zero, <code>ptr</code> need\nonly be non-null and aligned.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with,\nif the pointer is required to be allocated.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes), if\nnonzero, needs to be the same size as the pointer was allocated with.\n(Because similar to alignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same\nlayout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with,\nif the pointer is required to be allocated.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/slice/raw/fn.from_raw_parts.html\" title=\"fn core::slice::raw::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#758\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts\" class=\"fn\">from_parts</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a length, and a capacity.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/alloc/fn.alloc.html\" title=\"fn alloc::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html#method.slice_from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::slice_from_raw_parts\"><code>NonNull::slice_from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(mem) = NonNull::new(alloc(layout).cast::&lt;u32&gt;()) <span class=\"kw\">else </span>{\n            <span class=\"kw\">return</span>;\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#800\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. Most often, one does\nthis by converting the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts\" title=\"associated function alloc::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function; more generally,\nif <code>T</code> is non-zero-sized and the capacity is nonzero, one may use\nany method that calls <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code>; if <code>T</code> is zero-sized or the\ncapacity is zero, nothing needs to be done.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts\" class=\"fn\">into_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts\" title=\"associated function alloc::vec::Vec::from_parts\"><code>from_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details></div></details>",0,"tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3264\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3294\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> instead of\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a>), use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"string\">'_'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3324\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is the same as <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>,\nexcept that it also works with slice elements that are Clone but not Copy.\nIf Rust gets specialization this function may be deprecated.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3354-3356\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Given a range <code>src</code>, clones a slice of elements in that range and appends it to the end.</p>\n<p><code>src</code> must be a range that can form a valid subslice of the <code>Vec</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if starting index is greater than the end index\nor if the index is greater than the length of the vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>characters = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];\ncharacters.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(characters, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nnumbers.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>strings = <span class=\"macro\">vec!</span>[String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>), String::from(<span class=\"string\">\"!\"</span>)];\nstrings.extend_from_within(<span class=\"number\">1</span>..=<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(strings, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"!\"</span>]);</code></pre></div></div></details></div></details>",0,"tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3444\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3461\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details></div></details>",0,"tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3781\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3889-3892\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/splice/struct.Splice.html\" title=\"struct alloc::vec::splice::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the <code>Splice</code> iterator is not consumed before it is dropped.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Using <code>splice</code> to insert new items into a vector efficiently at a specific position\nindicated by an empty range:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nv.splice(<span class=\"number\">1</span>..<span class=\"number\">1</span>, new);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.87.0\">1.87.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3971-3974\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.extract_if\" class=\"fn\">extract_if</a>&lt;F, R&gt;(\n    &amp;mut self,\n    range: R,\n    filter: F,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/extract_if/struct.ExtractIf.html\" title=\"struct alloc::vec::extract_if::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element in the range should be removed.</p>\n<p>If the closure returns <code>true</code>, the element is removed from the vector\nand yielded. If the closure returns <code>false</code>, or panics, the element\nremains in the vector and will not be yielded.</p>\n<p>Only elements that fall in the provided range are considered for extraction, but any elements\nafter the range will still have to be moved if any element has been extracted.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.retain_mut\" title=\"method alloc::vec::Vec::retain_mut\"><code>retain_mut</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = range.start;\n<span class=\"kw\">let </span>end_items = vec.len() - range.end;\n\n<span class=\"kw\">while </span>i &lt; vec.len() - end_items {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>The iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>range</code> is out of bounds.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Splitting a vector into even and odd values, reusing the original vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(.., |x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre></div>\n<p>Using the range argument to only process a part of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>ones = items.extract_if(<span class=\"number\">7</span>.., |x| <span class=\"kw-2\">*</span>x == <span class=\"number\">1</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(items, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(ones.len(), <span class=\"number\">3</span>);</code></pre></div></div></details></div></details>",0,"tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#849\">Source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#866\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#928\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#946\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is zero, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1060\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1181\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.from_parts_in\" class=\"fn\">from_parts_in</a>(\n    ptr: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait core::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#memory-fitting\" title=\"trait core::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(v.as_mut_ptr()) };\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        p.add(i).write(<span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1230\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_raw_parts_in\" title=\"associated function alloc::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1281\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_parts_with_alloc\" class=\"fn\">into_parts_with_alloc</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(NonNull pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the <code>NonNull</code> pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the <code>NonNull</code> pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.from_parts_in\" title=\"associated function alloc::vec::Vec::from_parts_in\"><code>from_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts, box_vec_non_null)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr.cast::&lt;u32&gt;();\n\n    Vec::from_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1313\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n<p>A vector with zero-sized elements will always have a capacity of usize::MAX:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">struct </span>ZeroSized;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(std::mem::size_of::&lt;ZeroSized&gt;(), <span class=\"number\">0</span>);\n    <span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[ZeroSized; <span class=\"number\">0</span>];\n    <span class=\"macro\">assert_eq!</span>(v.capacity(), usize::MAX);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1337\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1367\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1404\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1447\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1471\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.with_capacity\" title=\"associated function alloc::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html#method.shrink\" title=\"method core::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1500\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1533\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.shrink_to_fit\" title=\"method alloc::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1586\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1623\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.87.0\">1.7.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1655\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1730\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.87.0\">1.37.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1814\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<p>The method also guarantees that, as long as <code>T</code> is not zero-sized and the capacity is\nnonzero, the pointer may be passed into <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> with a layout of\n<code>Layout::array::&lt;T&gt;(capacity)</code> in order to deallocate the backing memory. If this is done,\nbe careful not to run the destructor of the <code>Vec</code>, as dropping it will result in\ndouble-frees. Wrapping the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/nightly/core/mem/manually_drop/struct.ManuallyDrop.html\" title=\"struct core::mem::manually_drop::ManuallyDrop\"><code>ManuallyDrop</code></a> is the typical way to achieve this.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div>\n<p>Deallocating a vector using <a href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\"><code>Box</code></a> (which uses <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method core::alloc::global::GlobalAlloc::dealloc\"><code>dealloc</code></a> internally):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::{ManuallyDrop, MaybeUninit};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = ManuallyDrop::new(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n<span class=\"kw\">let </span>capacity = v.capacity();\n<span class=\"kw\">let </span>slice_ptr: <span class=\"kw-2\">*mut </span>[MaybeUninit&lt;i32&gt;] =\n    std::ptr::slice_from_raw_parts_mut(ptr.cast(), capacity);\ndrop(<span class=\"kw\">unsafe </span>{ Box::from_raw(slice_ptr) });</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_non_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1879\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.as_non_null\" class=\"fn\">as_non_null</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_vec_non_null</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a <code>NonNull</code> pointer to the vector’s buffer, or a dangling\n<code>NonNull</code> pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up dangling.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_ptr\" title=\"method alloc::vec::Vec::as_ptr\"><code>as_ptr</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_mut_ptr\" title=\"method alloc::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>,\nand <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.as_non_null\" title=\"method alloc::vec::Vec::as_non_null\"><code>as_non_null</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_non_null();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        x_ptr.add(i).write(i <span class=\"kw\">as </span>i32);\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_vec_non_null)]\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_non_null();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_non_null();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1886\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#1978\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a>, <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" title=\"method core::iter::traits::collect::Extend::extend\"><code>extend</code></a>, or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.capacity\" title=\"method alloc::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>See <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.spare_capacity_mut\" title=\"method alloc::vec::Vec::spare_capacity_mut\"><code>spare_capacity_mut()</code></a> for an example with safe\ninitialization of capacity elements and use of this method.</p>\n<p><code>set_len()</code> can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre></div>\n<p>Normally, here, one would use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.clear\" title=\"method alloc::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2014\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2063\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"string\">'e'</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'e'</span>]);</code></pre></div><h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2095\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.insert_mut\" class=\"fn\">insert_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right, and returning a reference to the new\nelement.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>x = vec.insert_mut(<span class=\"number\">3</span>, <span class=\"number\">6</span>);\n<span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);</code></pre></div><h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.len\" title=\"method alloc::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2159\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"string\">'b'</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.try_remove\" class=\"fn\">try_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_try_remove</code>)</span></div></span></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code> within the vector,\nshifting all elements after it to the left, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it does not\nexist.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_try_remove)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(v.try_remove(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2243-2245\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2269-2271\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2384-2387\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2411-2413\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2563\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div><h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2604\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre></div><h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut\" class=\"fn\">push_mut</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element to the back of a collection, returning a reference to it.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(push_mut)]\n\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>last, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">let </span>last = vec.push_mut(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>last += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div><h5 id=\"time-complexity-4\"><a class=\"doc-anchor\" href=\"#time-complexity-4\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_mut_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2674\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.push_mut_within_capacity\" class=\"fn\">push_mut_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>push_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element and returns a reference to it if there is sufficient spare capacity,\notherwise an error is returned with the element.</p>\n<p>Unlike <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push_mut\" title=\"method alloc::vec::Vec::push_mut\"><code>push_mut</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.reserve\" title=\"method alloc::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.try_reserve\" title=\"method alloc::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"time-complexity-5\"><a class=\"doc-anchor\" href=\"#time-complexity-5\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2709\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"https://doc.rust-lang.org/nightly/alloc/collections/vec_deque/struct.VecDeque.html#method.pop_front\" title=\"method alloc::collections::vec_deque::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div><h5 id=\"time-complexity-6\"><a class=\"doc-anchor\" href=\"#time-complexity-6\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_if\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.86.0\">1.86.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2736\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.pop_if\" class=\"fn\">pop_if</a>(&amp;mut self, predicate: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the last element from a vector if the predicate\nreturns <code>true</code>, or <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty (the predicate will not be called in that case).</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2764\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.peek_mut\" class=\"fn\">peek_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/peek_mut/struct.PeekMut.html\" title=\"struct alloc::vec::peek_mut::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_peek_mut</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the vector, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_peek_mut)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n<span class=\"macro\">assert!</span>(vec.peek_mut().is_none());\n\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">5</span>);\nvec.push(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>val) = vec.peek_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"number\">0</span>;\n}\n<span class=\"macro\">assert_eq!</span>(vec.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2786\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2837-2839\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/drain/struct.Drain.html\" title=\"struct alloc::vec::drain::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the subslice indicated by the given range from the vector,\nreturning a double-ended iterator over the removed subslice.</p>\n<p>If the iterator is dropped before being fully consumed,\nit drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the range has <code>start_bound &gt; end_bound</code>, or, if the range is\nbounded on either end and past the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2883\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2911\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.87.0\">1.0.0 (const: 1.87.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2936\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#2969-2971\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.take.html\" title=\"fn core::mem::take\"><code>mem::take</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.replace.html\" title=\"fn core::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.truncate\" title=\"method alloc::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.drain\" title=\"method alloc::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">'a'</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3030-3032\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3072-3074\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>.</p>\n<p>Note that the type <code>T</code> must outlive the chosen lifetime <code>'a</code>. If the type\nhas only static references, or none at all, then this may be chosen to be\n<code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3110\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3175\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.set_len\" title=\"method alloc::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\"><code>push</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend\" title=\"method alloc::vec::Vec::extend\"><code>extend</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_slice\" title=\"method alloc::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.extend_from_within\" title=\"method alloc::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.insert\" title=\"method alloc::vec::Vec::insert\"><code>insert</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.append\" title=\"method alloc::vec::Vec::append\"><code>append</code></a>, <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize\" title=\"method alloc::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.resize_with\" title=\"method alloc::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3234\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#tymethod.into_chunks\" class=\"fn\">into_chunks</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_chunks</code>)</span></div></span></summary><div class=\"docblock\"><p>Groups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to produce a <code>Vec&lt;[T; N]&gt;</code>, dropping\nelements in the remainder. <code>N</code> must be greater than zero.</p>\n<p>If the capacity is not a multiple of the chunk size, the buffer will shrink down to the\nnearest multiple with a reallocation or deallocation.</p>\n<p>This function can be used to reverse <a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_flattened\" title=\"method alloc::vec::Vec::into_flattened\"><code>Vec::into_flattened</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_chunks)]\n\n</span><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"macro\">assert_eq!</span>(vec.into_chunks::&lt;<span class=\"number\">3</span>&gt;(), [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]);\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>chunks: Vec&lt;[u8; <span class=\"number\">10</span>]&gt; = vec.into_chunks();\n<span class=\"macro\">assert!</span>(chunks.is_empty());\n\n<span class=\"kw\">let </span>flat = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">8 </span>* <span class=\"number\">8 </span>* <span class=\"number\">8</span>];\n<span class=\"kw\">let </span>reshaped: Vec&lt;[[[u8; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]; <span class=\"number\">8</span>]&gt; = flat.into_chunks().into_chunks().into_chunks();\n<span class=\"macro\">assert_eq!</span>(reshaped.len(), <span class=\"number\">1</span>);</code></pre></div></div></details></div></details>",0,"tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec (not\nrecursively counting any heap allocations contained within the\nstructure). Does not include the size of <code>self</code></div></details></div></details>","VecAllocExt","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecAllocExt-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VecAllocExt-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VecAllocExt for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">T</a> = T</h4></section></summary><div class='docblock'>Item type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_accounted\" class=\"method trait-impl\"><a href=\"#method.push_accounted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">push_accounted</a>(\n    &amp;mut self,\n    x: &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as VecAllocExt&gt;::T,\n    accounting: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n)</h4></section></summary><div class='docblock'><a href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.push\" title=\"method alloc::vec::Vec::push\">Push</a> new element to vector and increase\n<code>accounting</code> by any newly allocated bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.allocated_size\" class=\"method trait-impl\"><a href=\"#method.allocated_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">allocated_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the amount of memory allocated by this Vec to store elements\n(<code>size_of&lt;T&gt; * capacity</code>). <a>Read more</a></div></details></div></details>","VecAllocExt","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visit-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Visit-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Visit for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: Visit,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as Visitor&gt;::Break&gt;<div class=\"where\">where\n    V: Visitor,</div></h4></section></div></details>","Visit","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitMut-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-VisitMut-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; VisitMut for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: VisitMut,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit\" class=\"method trait-impl\"><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">visit</a>&lt;V&gt;(&amp;mut self, visitor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;V as VisitorMut&gt;::Break&gt;<div class=\"where\">where\n    V: VisitorMut,</div></h4></section></div></details>","VisitMut","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; Yokeable&lt;'a&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;'a self) -&gt; &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(from: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt; as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; Zeroize for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: Zeroize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>“Best effort” zeroization for <code>Vec</code>.</p>\n<p>Ensures the entire capacity of the <code>Vec</code> is zeroed. Cannot ensure that\nprevious reallocations did not leave values on the heap.</p>\n</div></details></div></details>","Zeroize","tests_fuzz::ir::insert_expr::RowValues"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3548\">Source</a></span><a href=\"#impl-__Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3549\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3552\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-CloneableSecret-for-Vec%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/secrecy/0.8.0/src/secrecy/vec.rs.html#11\">Source</a><a href=\"#impl-CloneableSecret-for-Vec%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.CloneableSecret.html\" title=\"trait secrecy::CloneableSecret\">CloneableSecret</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/secrecy/0.8.0/secrecy/trait.CloneableSecret.html\" title=\"trait secrecy::CloneableSecret\">CloneableSecret</a> + Zeroize,</div></h3></section>","CloneableSecret","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#3566\">Source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefPure.html\" title=\"trait core::ops::deref::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","DerefPure","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/alloc/vec/mod.rs.html#4029\">Source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/trait.Allocator.html\" title=\"trait core::alloc::Allocator\">Allocator</a>,</div></h3></section>","Eq","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-FromStream%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromStream&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","FromStream<T>","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-StableDeref-for-Vec%3CT%3E\" class=\"impl\"><a href=\"#impl-StableDeref-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StableDeref for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h3></section>","StableDeref","tests_fuzz::ir::insert_expr::RowValues"],["<section id=\"impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"impl\"><a href=\"#impl-ZeroizeOnDrop-for-Vec%3CZ%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Z&gt; ZeroizeOnDrop for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Z&gt;<div class=\"where\">where\n    Z: ZeroizeOnDrop,</div></h3></section>","ZeroizeOnDrop","tests_fuzz::ir::insert_expr::RowValues"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[626764,651660,454473,464324,442849,429360]}