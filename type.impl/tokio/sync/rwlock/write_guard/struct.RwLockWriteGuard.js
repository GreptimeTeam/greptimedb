(function() {
    var type_impls = Object.fromEntries([["flow",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for RwLockWriteGuard&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","flow::utils::ArrangeWriter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for RwLockWriteGuard&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","flow::utils::ArrangeWriter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Display-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for RwLockWriteGuard&lt;'a, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","flow::utils::ArrangeWriter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-Drop-for-RwLockWriteGuard%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for RwLockWriteGuard&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","flow::utils::ArrangeWriter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RwLockWriteGuard%3C'a,+T%3E\" class=\"impl\"><a href=\"#impl-RwLockWriteGuard%3C'a,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; RwLockWriteGuard&lt;'a, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;F, U&gt;(\n    this: RwLockWriteGuard&lt;'a, T&gt;,\n    f: F,\n) -&gt; RwLockMappedWriteGuard&lt;'a, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut U</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <a href=\"struct@crate::sync::RwLockMappedWriteGuard\"><code>RwLockMappedWriteGuard</code></a> for a component of the locked data.</p>\n<p>This operation cannot fail as the <code>RwLockWriteGuard</code> passed in already\nlocked the data.</p>\n<p>This is an associated function that needs to be used as\n<code>RwLockWriteGuard::map(..)</code>. A method would interfere with methods of\nthe same name on the contents of the locked data.</p>\n<p>This is an asynchronous version of <a href=\"https://docs.rs/lock_api/latest/lock_api/struct.RwLockWriteGuard.html#method.map\"><code>RwLockWriteGuard::map</code></a> from the\n<a href=\"https://crates.io/crates/parking_lot\"><code>parking_lot</code> crate</a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{RwLock, RwLockWriteGuard};\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>lock = RwLock::new(Foo(<span class=\"number\">1</span>));\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mapped = RwLockWriteGuard::map(lock.write().<span class=\"kw\">await</span>, |f| <span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>);\n    <span class=\"kw-2\">*</span>mapped = <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(Foo(<span class=\"number\">2</span>), <span class=\"kw-2\">*</span>lock.read().<span class=\"kw\">await</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">downgrade_map</a>&lt;F, U&gt;(\n    this: RwLockWriteGuard&lt;'a, T&gt;,\n    f: F,\n) -&gt; RwLockReadGuard&lt;'a, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;U</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new [<code>RwLockReadGuard</code>] for a component of the locked data.</p>\n<p>This operation cannot fail as the <code>RwLockWriteGuard</code> passed in already\nlocked the data.</p>\n<p>This is an associated function that needs to be used as\n<code>RwLockWriteGuard::downgrade_map(..)</code>. A method would interfere with methods of\nthe same name on the contents of the locked data.</p>\n<p>This is equivalent to a combination of asynchronous <a href=\"https://docs.rs/lock_api/latest/lock_api/struct.RwLockWriteGuard.html#method.map\"><code>RwLockWriteGuard::map</code></a> and <a href=\"https://docs.rs/lock_api/latest/lock_api/struct.RwLockWriteGuard.html#method.downgrade\"><code>RwLockWriteGuard::downgrade</code></a>\nfrom the <a href=\"https://crates.io/crates/parking_lot\"><code>parking_lot</code> crate</a>.</p>\n<p>Inside of <code>f</code>, you retain exclusive access to the data, despite only being given a <code>&amp;T</code>. Handing out a\n<code>&amp;mut T</code> would result in unsoundness, as you could use interior mutability.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{RwLock, RwLockWriteGuard};\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>lock = RwLock::new(Foo(<span class=\"number\">1</span>));\n\n<span class=\"kw\">let </span>mapped = RwLockWriteGuard::downgrade_map(lock.write().<span class=\"kw\">await</span>, |f| <span class=\"kw-2\">&amp;</span>f.<span class=\"number\">0</span>);\n<span class=\"kw\">let </span>foo = lock.read().<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(foo.<span class=\"number\">0</span>, <span class=\"kw-2\">*</span>mapped);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map</a>&lt;F, U&gt;(\n    this: RwLockWriteGuard&lt;'a, T&gt;,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;RwLockMappedWriteGuard&lt;'a, U&gt;, RwLockWriteGuard&lt;'a, T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut U</a>&gt;,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to make a new <a href=\"struct@crate::sync::RwLockMappedWriteGuard\"><code>RwLockMappedWriteGuard</code></a> for a component of\nthe locked data. The original guard is returned if the closure returns\n<code>None</code>.</p>\n<p>This operation cannot fail as the <code>RwLockWriteGuard</code> passed in already\nlocked the data.</p>\n<p>This is an associated function that needs to be\nused as <code>RwLockWriteGuard::try_map(...)</code>. A method would interfere with\nmethods of the same name on the contents of the locked data.</p>\n<p>This is an asynchronous version of <a href=\"https://docs.rs/lock_api/latest/lock_api/struct.RwLockWriteGuard.html#method.try_map\"><code>RwLockWriteGuard::try_map</code></a> from\nthe <a href=\"https://crates.io/crates/parking_lot\"><code>parking_lot</code> crate</a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{RwLock, RwLockWriteGuard};\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>lock = RwLock::new(Foo(<span class=\"number\">1</span>));\n\n{\n    <span class=\"kw\">let </span>guard = lock.write().<span class=\"kw\">await</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>guard = RwLockWriteGuard::try_map(guard, |f| <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>)).expect(<span class=\"string\">\"should not fail\"</span>);\n    <span class=\"kw-2\">*</span>guard = <span class=\"number\">2</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(Foo(<span class=\"number\">2</span>), <span class=\"kw-2\">*</span>lock.read().<span class=\"kw\">await</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_downgrade_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_downgrade_map</a>&lt;F, U&gt;(\n    this: RwLockWriteGuard&lt;'a, T&gt;,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;RwLockReadGuard&lt;'a, U&gt;, RwLockWriteGuard&lt;'a, T&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;U</a>&gt;,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to make a new [<code>RwLockReadGuard</code>] for a component of\nthe locked data. The original guard is returned if the closure returns\n<code>None</code>.</p>\n<p>This operation cannot fail as the <code>RwLockWriteGuard</code> passed in already\nlocked the data.</p>\n<p>This is an associated function that needs to be\nused as <code>RwLockWriteGuard::try_downgrade_map(...)</code>. A method would interfere with\nmethods of the same name on the contents of the locked data.</p>\n<p>This is equivalent to a combination of asynchronous [<code>RwLockWriteGuard::try_map</code>] and <a href=\"https://docs.rs/lock_api/latest/lock_api/struct.RwLockWriteGuard.html#method.downgrade\"><code>RwLockWriteGuard::downgrade</code></a>\nfrom the <a href=\"https://crates.io/crates/parking_lot\"><code>parking_lot</code> crate</a>.</p>\n<p>Inside of <code>f</code>, you retain exclusive access to the data, despite only being given a <code>&amp;T</code>. Handing out a\n<code>&amp;mut T</code> would result in unsoundness, as you could use interior mutability.</p>\n<p>If this function returns <code>Err(...)</code>, the lock is never unlocked nor downgraded.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::{RwLock, RwLockWriteGuard};\n\n<span class=\"attr\">#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n</span><span class=\"kw\">struct </span>Foo(u32);\n\n<span class=\"kw\">let </span>lock = RwLock::new(Foo(<span class=\"number\">1</span>));\n\n<span class=\"kw\">let </span>guard = RwLockWriteGuard::try_downgrade_map(lock.write().<span class=\"kw\">await</span>, |f| <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>f.<span class=\"number\">0</span>)).expect(<span class=\"string\">\"should not fail\"</span>);\n<span class=\"kw\">let </span>foo = lock.read().<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(foo.<span class=\"number\">0</span>, <span class=\"kw-2\">*</span>guard);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_mapped\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_mapped</a>(\n    this: RwLockWriteGuard&lt;'a, T&gt;,\n) -&gt; RwLockMappedWriteGuard&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this <code>RwLockWriteGuard</code> into an <code>RwLockMappedWriteGuard</code>. This\nmethod can be used to store a non-mapped guard in a struct field that\nexpects a mapped guard.</p>\n<p>This is equivalent to calling <code>RwLockWriteGuard::map(guard, |me| me)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">downgrade</a>(self) -&gt; RwLockReadGuard&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\"><p>Atomically downgrades a write lock into a read lock without allowing\nany writers to take exclusive access of the lock in the meantime.</p>\n<p><strong>Note:</strong> This won’t <em>necessarily</em> allow any additional readers to acquire\nlocks, since <a href=\"struct@crate::sync::RwLock\"><code>RwLock</code></a> is fair and it is possible that a writer is next\nin line.</p>\n<p>Returns an RAII guard which will drop this read access of the <code>RwLock</code>\nwhen dropped.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>lock = Arc::new(RwLock::new(<span class=\"number\">1</span>));\n\n<span class=\"kw\">let </span>n = lock.write().<span class=\"kw\">await</span>;\n\n<span class=\"kw\">let </span>cloned_lock = lock.clone();\n<span class=\"kw\">let </span>handle = tokio::spawn(<span class=\"kw\">async move </span>{\n    <span class=\"kw-2\">*</span>cloned_lock.write().<span class=\"kw\">await </span>= <span class=\"number\">2</span>;\n});\n\n<span class=\"kw\">let </span>n = n.downgrade();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>n, <span class=\"number\">1</span>, <span class=\"string\">\"downgrade is atomic\"</span>);\n\ndrop(n);\nhandle.<span class=\"kw\">await</span>.unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>lock.read().<span class=\"kw\">await</span>, <span class=\"number\">2</span>, <span class=\"string\">\"second writer obtained write lock\"</span>);</code></pre></div></div></details></div></details>",0,"flow::utils::ArrangeWriter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-__Deref-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for RwLockWriteGuard&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","flow::utils::ArrangeWriter"],["<section id=\"impl-Send-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Send-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for RwLockWriteGuard&lt;'_, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","flow::utils::ArrangeWriter"],["<section id=\"impl-Sync-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a href=\"#impl-Sync-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for RwLockWriteGuard&lt;'_, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","flow::utils::ArrangeWriter"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[24655]}