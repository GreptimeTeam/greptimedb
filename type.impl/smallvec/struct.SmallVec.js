(function() {
    var type_impls = Object.fromEntries([["mito2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-AsMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[<A as Array>::Item]>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[<A as Array>::Item]>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Borrow%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[<A as Array>::Item]>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[<A as Array>::Item]>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Clone-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;SmallVec&lt;A&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Debug-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Default-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, A&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;SmallVec&lt;A&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Drop-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%3CA+as+Array%3E::Item%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%3CA+as+Array%3E::Item%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<<A as Array>::Item>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3C%26%5B%3CA+as+Array%3E::Item%5D%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a [&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;'a [&lt;A as Array&gt;::Item]) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'a [<A as Array>::Item]>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CA%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3CA%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;A&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: A) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<A>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3C%3CA+as+Array%3E::Item%3E%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3CVec%3C%3CA+as+Array%3E::Item%3E%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<<A as Array>::Item>>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%3CA+as+Array%3E::Item%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%3CA+as+Array%3E::Item%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterable: I) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<<A as Array>::Item>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Hash-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Index%3CI%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CI%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    index: I,\n) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;A as Array&gt;::Item</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;SmallVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&lt;SmallVec&lt;A&gt; as IntoIterator&gt;::IntoIter\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Ord-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;SmallVec&lt;A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CSmallVec%3CB%3E%3E-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CSmallVec%3CB%3E%3E-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;SmallVec&lt;B&gt;&gt; for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    B: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&lt;B as Array&gt;::Item&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;SmallVec&lt;B&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<SmallVec<B>>","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialOrd-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;SmallVec&lt;A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1398\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1416\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1434\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1452\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmallVec%3C%5BT;+N%5D%3E\" class=\"impl\"><a href=\"#impl-SmallVec%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; SmallVec&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_const\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new_const</a>() -&gt; SmallVec&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;[T; N]&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Construct an empty vector.</p>\n<p>This is a <code>const</code> version of [<code>SmallVec::new</code>] that is enabled by the feature <code>const_new</code>, with the limitation that it only works for arrays.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_const\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_const</a>(items: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>) -&gt; SmallVec&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;[T; N]&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>The array passed as an argument is moved to be an inline version of <code>SmallVec</code>.</p>\n<p>This is a <code>const</code> version of [<code>SmallVec::from_buf</code>] that is enabled by the feature <code>const_new</code>, with the limitation that it only works for arrays.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_const_with_len_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">from_const_with_len_unchecked</a>(\n    items: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; SmallVec&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; N]</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;[T; N]&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>SmallVec</code> on the stack from an array without\ncopying elements. Also sets the length. The user is responsible\nfor ensuring that <code>len &lt;= N</code>.</p>\n<p>This is a <code>const</code> version of [<code>SmallVec::from_buf_and_len_unchecked</code>] that is enabled by the feature <code>const_new</code>, with the limitation that it only works for arrays.</p>\n</div></details></div></details>",0,"mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Construct an empty vector</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Construct an empty vector with enough capacity pre-allocated to store at least <code>n</code>\nelements.</p>\n<p>Will create a heap allocation only if <code>n</code> is larger than the inline capacity.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>v: SmallVec&lt;[u8; <span class=\"number\">3</span>]&gt; = SmallVec::with_capacity(<span class=\"number\">100</span>);\n\n<span class=\"macro\">assert!</span>(v.is_empty());\n<span class=\"macro\">assert!</span>(v.capacity() &gt;= <span class=\"number\">100</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_vec</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.</p>\n<p>Elements will be copied to the inline buffer if <code>vec.capacity() &lt;= Self::inline_capacity()</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>smallvec::SmallVec;\n\n<span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>small_vec: SmallVec&lt;[<span class=\"kw\">_</span>; <span class=\"number\">3</span>]&gt; = SmallVec::from_vec(vec);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>small_vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_buf\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_buf</a>(buf: A) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without\ncopying elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>smallvec::SmallVec;\n\n<span class=\"kw\">let </span>buf = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>small_vec: SmallVec&lt;<span class=\"kw\">_</span>&gt; = SmallVec::from_buf(buf);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>small_vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_buf_and_len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_buf_and_len</a>(buf: A, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without\ncopying elements. Also sets the length, which must be less or\nequal to the size of <code>buf</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>smallvec::SmallVec;\n\n<span class=\"kw\">let </span>buf = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span>small_vec: SmallVec&lt;<span class=\"kw\">_</span>&gt; = SmallVec::from_buf_and_len(buf, <span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>small_vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_buf_and_len_unchecked\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_buf_and_len_unchecked</a>(\n    buf: <a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;A&gt;,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without\ncopying elements. Also sets the length. The user is responsible\nfor ensuring that <code>len &lt;= A::size()</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>smallvec::SmallVec;\n<span class=\"kw\">use </span>std::mem::MaybeUninit;\n\n<span class=\"kw\">let </span>buf = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span>small_vec: SmallVec&lt;<span class=\"kw\">_</span>&gt; = <span class=\"kw\">unsafe </span>{\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), <span class=\"number\">5</span>)\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>small_vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_len\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the length of a vector.</p>\n<p>This will explicitly set the size of the vector, without actually\nmodifying its buffers, so it is up to the caller to ensure that the\nvector is actually the specified size.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inline_size\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">inline_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The maximum number of elements this vector can hold inline</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The number of elements stored in the vector</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector is empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The number of items the vector can hold without reallocating</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spilled\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">spilled</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the data has spilled into a separate heap-allocated buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; Drain&lt;'_, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a draining iterator that removes the specified range in the vector\nand yields the removed items.</p>\n<p>Note 1: The element range is removed even if the iterator is only\npartially consumed or not consumed at all.</p>\n<p>Note 2: It is unspecified how many elements are removed from the vector\nif the <code>Drain</code> value is leaked.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, value: &lt;A as Array&gt;::Item)</h4></section></summary><div class=\"docblock\"><p>Append an item to the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;A as Array&gt;::Item&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an item from the end of the vector and return it, or None if empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>&lt;B&gt;(&amp;mut self, other: &amp;mut SmallVec&lt;B&gt;)<div class=\"where\">where\n    B: Array&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v0: SmallVec&lt;[u8; <span class=\"number\">16</span>]&gt; = <span class=\"macro\">smallvec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v1: SmallVec&lt;[u8; <span class=\"number\">32</span>]&gt; = <span class=\"macro\">smallvec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nv0.append(<span class=\"kw-2\">&amp;mut </span>v1);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>v0, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>v1, []);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.grow\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">grow</a>(&amp;mut self, new_cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Re-allocate to set the capacity to <code>max(new_cap, inline_size())</code>.</p>\n<p>Panics if <code>new_cap</code> is less than the vector’s length\nor if the capacity computation overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_grow\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_grow</a>(&amp;mut self, new_cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, CollectionAllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Re-allocate to set the capacity to <code>max(new_cap, inline_size())</code>.</p>\n<p>Panics if <code>new_cap</code> is less than the vector’s length</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserve capacity for <code>additional</code> more elements to be inserted.</p>\n<p>May reserve more space to avoid frequent reallocations.</p>\n<p>Panics if the capacity computation overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_reserve</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, CollectionAllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Reserve capacity for <code>additional</code> more elements to be inserted.</p>\n<p>May reserve more space to avoid frequent reallocations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserve the minimum capacity for <code>additional</code> more elements to be inserted.</p>\n<p>Panics if the new capacity overflows <code>usize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, CollectionAllocErr&gt;</h4></section></summary><div class=\"docblock\"><p>Reserve the minimum capacity for <code>additional</code> more elements to be inserted.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrink the capacity of the vector as much as possible.</p>\n<p>When possible, this will move data from an external heap buffer to the vector’s inline\nstorage.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shorten the vector, keeping the first <code>len</code> elements and dropping the rest.</p>\n<p>If <code>len</code> is greater than or equal to the vector’s current length, this has no\neffect.</p>\n<p>This does not re-allocate.  If you want the vector’s capacity to shrink, call\n<code>shrink_to_fit</code> after truncating.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Remove the element at position <code>index</code>, replacing it with the last element.</p>\n<p>This does not preserve ordering, but is O(1).</p>\n<p>Panics if <code>index</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all elements from the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Remove and return the element at position <code>index</code>, shifting all elements after it to the\nleft.</p>\n<p>Panics if <code>index</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, element: &lt;A as Array&gt;::Item)</h4></section></summary><div class=\"docblock\"><p>Insert an element at position <code>index</code>, shifting all elements after it to the right.</p>\n<p>Panics if <code>index &gt; len</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_many\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert_many</a>&lt;I&gt;(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Insert multiple elements at position <code>index</code>, shifting all following elements toward the\nback.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the <code>SmallVec</code> has already spilled onto\nthe heap.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[&lt;A as Array&gt;::Item]&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating if the <code>SmallVec</code> has already spilled\nonto the heap.</p>\n<p>Note that this will drop any excess capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;A, SmallVec&lt;A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Convert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise return <code>Err(Self)</code>.</p>\n<p>This method returns <code>Err(Self)</code> if the <code>SmallVec</code> is too short (and the <code>A</code> contains uninitialized elements),\nor if the <code>SmallVec</code> is too long (and all the elements were spilled to the heap).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut &lt;A as Array&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place and preserves the order of the retained\nelements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut &lt;A as Array&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>This method is identical in behaviour to [<code>retain</code>]; it is included only\nto maintain api-compatibility with <code>std::Vec</code>, where the methods are\nseparate for historical reasons.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dedup</a>(&amp;mut self)<div class=\"where\">where\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes consecutive duplicate elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut &lt;A as Array&gt;::Item, &amp;mut &lt;A as Array&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes consecutive duplicate elements using the given equality relation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dedup_by_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut &lt;A as Array&gt;::Item) -&gt; K,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes consecutive elements that map to the same key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; &lt;A as Array&gt;::Item,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>SmallVec</code> is extended by the difference, with each\nadditional slot filled with the result of calling the closure <code>f</code>. The return values from <code>f</code>\nwill end up in the <code>SmallVec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>SmallVec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If you’d rather <code>Clone</code> a given\nvalue, use <code>resize</code>. If you want to use the <code>Default</code> trait to generate values, you can pass\n<code>Default::default()</code> as the second argument.</p>\n<p>Added for <code>std::vec::Vec</code> compatibility (added in Rust 1.33.0)</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec : SmallVec&lt;[<span class=\"kw\">_</span>; <span class=\"number\">4</span>]&gt; = <span class=\"macro\">smallvec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec : SmallVec&lt;[<span class=\"kw\">_</span>; <span class=\"number\">4</span>]&gt; = <span class=\"macro\">smallvec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>&lt;A as Array&gt;::Item,\n    length: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a <code>SmallVec</code> directly from the raw components of another\n<code>SmallVec</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> needs to have been previously allocated via <code>SmallVec</code> for its\nspilled storage (at least, it’s highly likely to be incorrect if it\nwasn’t).</li>\n<li><code>ptr</code>’s <code>A::Item</code> type needs to be the same size and alignment that\nit was allocated with</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated\nwith.</li>\n</ul>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures.</p>\n<p>Additionally, <code>capacity</code> must be greater than the amount of inline\nstorage <code>A</code> has; that is, the new <code>SmallVec</code> must need to spill over\ninto heap allocated storage. This condition is asserted against.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>SmallVec</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: SmallVec&lt;[<span class=\"kw\">_</span>; <span class=\"number\">1</span>]&gt; = <span class=\"macro\">smallvec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n    <span class=\"comment\">// Pull out the important parts of `v`.\n    </span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"kw\">let </span>cap = v.capacity();\n    <span class=\"kw\">let </span>spilled = v.spilled();\n\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        </span>mem::forget(v);\n\n        <span class=\"comment\">// Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        </span><span class=\"macro\">assert!</span>(spilled);\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n            ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n        }\n\n        <span class=\"comment\">// Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        </span><span class=\"kw\">let </span>rebuilt = SmallVec::&lt;[<span class=\"kw\">_</span>; <span class=\"number\">2</span>]&gt;::from_raw_parts(p, len, cap);\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>rebuilt, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    }\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>&lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>&lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Returns a raw mutable pointer to the vector’s buffer.</p>\n</div></details></div></details>",0,"mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, value: &lt;A as Array&gt;::Item)</h4></section></summary><div class=\"docblock\"><p>Resizes the vector so that its length is equal to <code>len</code>.</p>\n<p>If <code>len</code> is less than the current length, the vector simply truncated.</p>\n<p>If <code>len</code> is greater than the current length, <code>value</code> is appended to the\nvector until its length equals <code>len</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_elem\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_elem</a>(elem: &lt;A as Array&gt;::Item, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>smallvec::SmallVec;\n\n<span class=\"kw\">let </span>v = SmallVec::&lt;[char; <span class=\"number\">128</span>]&gt;::from_elem(<span class=\"string\">'d'</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(v, SmallVec::from_buf([<span class=\"string\">'d'</span>, <span class=\"string\">'d'</span>]));</code></pre></div></div></details></div></details>",0,"mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_slice</a>(slice: &amp;[&lt;A as Array&gt;::Item]) -&gt; SmallVec&lt;A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SmallVec&lt;A&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Copy the elements from a slice into a new <code>SmallVec</code>.</p>\n<p>For slices of <code>Copy</code> types, this is more efficient than <code>SmallVec::from(slice)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert_from_slice</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, slice: &amp;[&lt;A as Array&gt;::Item])</h4></section></summary><div class=\"docblock\"><p>Copy elements from a slice into the vector at position <code>index</code>, shifting any following\nelements toward the back.</p>\n<p>For slices of <code>Copy</code> types, this is more efficient than <code>insert</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_slice</a>(&amp;mut self, slice: &amp;[&lt;A as Array&gt;::Item])</h4></section></summary><div class=\"docblock\"><p>Copy elements from a slice and append them to the vector.</p>\n<p>For slices of <code>Copy</code> types, this is more efficient than <code>extend</code>.</p>\n</div></details></div></details>",0,"mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Write-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a buffer into this writer, returning how many bytes were written. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Attempts to write an entire buffer into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Flushes this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1758\">Source</a></span><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Like <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1773\">Source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>)</span></div></span><div class='docblock'>Determines if this <code>Write</code>r has an efficient <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1897\">Source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>)</span></div></span><div class='docblock'>Attempts to write multiple buffers into this writer. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1950\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a formatted string into this writer, returning any error\nencountered. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/mod.rs.html#1980-1982\">Source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; &amp;mut Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details>","Write","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-__Deref-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<section id=\"impl-Eq-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Eq-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"],["<section id=\"impl-Send-for-SmallVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Send-for-SmallVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for SmallVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","mito2::access_layer::SstInfoArray","mito2::memtable::time_partition::PartitionVec","mito2::memtable::version::SmallMemtableVec"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[107698]}