(function() {
    var type_impls = Object.fromEntries([["common_function",[]],["common_meta",[]],["flow",[]],["meta_client",[]],["meta_srv",[]],["mito2",[]],["store_api",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CRegionId%3E-for-u64\" class=\"impl\"><a class=\"src rightside\" href=\"src/store_api/storage/descriptors.rs.html#144-148\">Source</a><a href=\"#impl-From%3CRegionId%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"store_api/storage/struct.RegionId.html\" title=\"struct store_api::storage::RegionId\">RegionId</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/store_api/storage/descriptors.rs.html#145-147\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(region_id: <a class=\"struct\" href=\"store_api/storage/struct.RegionId.html\" title=\"struct store_api::storage::RegionId\">RegionId</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<RegionId>","store_api::logstore::entry::Id","store_api::storage::types::SequenceNumber","store_api::ManifestVersion"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRegionId%3E-for-u64\" class=\"impl\"><a class=\"src rightside\" href=\"src/store_api/storage/descriptors.rs.html#156-160\">Source</a><a href=\"#impl-PartialEq%3CRegionId%3E-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"store_api/storage/struct.RegionId.html\" title=\"struct store_api::storage::RegionId\">RegionId</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/store_api/storage/descriptors.rs.html#157-159\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"store_api/storage/struct.RegionId.html\" title=\"struct store_api::storage::RegionId\">RegionId</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<RegionId>","store_api::logstore::entry::Id","store_api::storage::types::SequenceNumber","store_api::ManifestVersion"]]],["table",[]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[22,19,12,19,16,13,4280,13]}