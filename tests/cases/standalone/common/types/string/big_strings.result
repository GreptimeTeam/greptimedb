-- Migrated from DuckDB test: test/sql/types/string/test_big_strings.test
-- Test handling of large strings
-- Test large string creation and manipulation
CREATE TABLE big_strings("id" INTEGER, s VARCHAR, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

-- Insert strings of various sizes
INSERT INTO big_strings VALUES
    (1, REPEAT('a', 100), 1000),
    (2, REPEAT('Hello World! ', 50), 2000),
    (3, REPEAT('Unicode 世界 ', 100), 3000),
    (4, REPEAT('x', 1000), 4000);

Affected Rows: 4

-- Test length of big strings
SELECT "id", LENGTH(s) FROM big_strings ORDER BY "id";

+----+-----------------------+
| id | length(big_strings.s) |
+----+-----------------------+
| 1  | 100                   |
| 2  | 650                   |
| 3  | 1100                  |
| 4  | 1000                  |
+----+-----------------------+

-- Test substring operations on big strings
SELECT "id", SUBSTRING(s, 1, 20) FROM big_strings ORDER BY "id";

+----+------------------------------------------+
| id | substr(big_strings.s,Int64(1),Int64(20)) |
+----+------------------------------------------+
| 1  | aaaaaaaaaaaaaaaaaaaa                     |
| 2  | Hello World! Hello W                     |
| 3  | Unicode 世界 Unicode 世                  |
| 4  | xxxxxxxxxxxxxxxxxxxx                     |
+----+------------------------------------------+

SELECT "id", RIGHT(s, 10) FROM big_strings ORDER BY "id";

+----+--------------------------------+
| id | right(big_strings.s,Int64(10)) |
+----+--------------------------------+
| 1  | aaaaaaaaaa                     |
| 2  | lo World!                      |
| 3  | nicode 世界                    |
| 4  | xxxxxxxxxx                     |
+----+--------------------------------+

-- Test concatenation with big strings
SELECT "id", LENGTH(s || s) FROM big_strings WHERE "id" = 1;

+----+----------------------------------------+
| id | length(big_strings.s || big_strings.s) |
+----+----------------------------------------+
| 1  | 200                                    |
+----+----------------------------------------+

-- Test pattern matching on big strings
SELECT "id", s LIKE '%World%' FROM big_strings ORDER BY "id";

+----+------------------------------------+
| id | big_strings.s LIKE Utf8("%World%") |
+----+------------------------------------+
| 1  | false                              |
| 2  | true                               |
| 3  | false                              |
| 4  | false                              |
+----+------------------------------------+

-- Test comparison with big strings
SELECT COUNT(*) FROM big_strings WHERE s = REPEAT('a', 100);

+----------+
| count(*) |
+----------+
| 1        |
+----------+

-- Test UPPER/LOWER on big strings
SELECT "id", LENGTH(UPPER(s)) FROM big_strings WHERE "id" <= 2 ORDER BY "id";

+----+------------------------------+
| id | length(upper(big_strings.s)) |
+----+------------------------------+
| 1  | 100                          |
| 2  | 650                          |
+----+------------------------------+

-- Test trimming big strings
CREATE TABLE padded_strings(s VARCHAR, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO padded_strings VALUES (CONCAT('   ', REPEAT('test', 100), '   '), 1000);

Affected Rows: 1

SELECT LENGTH(s), LENGTH(TRIM(s)) FROM padded_strings;

+--------------------------+---------------------------------+
| length(padded_strings.s) | length(btrim(padded_strings.s)) |
+--------------------------+---------------------------------+
| 406                      | 400                             |
+--------------------------+---------------------------------+

DROP TABLE big_strings;

Affected Rows: 0

DROP TABLE padded_strings;

Affected Rows: 0

