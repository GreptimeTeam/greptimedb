-- Port from https://github.com/duckdb/duckdb/blob/main/test/sql/types/decimal/decimal_arithmetic.test
-- negate
SELECT -('0.1'::DECIMAL), -('-0.1'::DECIMAL);

+-----------------+------------------+
| (- Utf8("0.1")) | (- Utf8("-0.1")) |
+-----------------+------------------+
| -0.1000000000   | 0.1000000000     |
+-----------------+------------------+

-- unary +
SELECT +('0.1'::DECIMAL), +('-0.1'::DECIMAL);

+--------------+---------------+
| Utf8("0.1")  | Utf8("-0.1")  |
+--------------+---------------+
| 0.1000000000 | -0.1000000000 |
+--------------+---------------+

-- addition
SELECT '0.1'::DECIMAL + '0.1'::DECIMAL;

+---------------------------+
| Utf8("0.1") + Utf8("0.1") |
+---------------------------+
| 0.2000000000              |
+---------------------------+

-- addition with non-decimal
SELECT '0.1'::DECIMAL + 1::INTEGER;

+------------------------+
| Utf8("0.1") + Int64(1) |
+------------------------+
| 1.1000000000           |
+------------------------+

SELECT '0.5'::DECIMAL(4,4) + '0.5'::DECIMAL(4,4);

+---------------------------+
| Utf8("0.5") + Utf8("0.5") |
+---------------------------+
| 1.0000                    |
+---------------------------+

-- addition between different decimal types
SELECT '0.5'::DECIMAL(1,1) + '100.0'::DECIMAL(3,0);

+-----------------------------+
| Utf8("0.5") + Utf8("100.0") |
+-----------------------------+
| 100.5                       |
+-----------------------------+

-- test decimals and integers with big decimals
SELECT ('0.5'::DECIMAL(1,1) + 10000)::VARCHAR,
        ('0.54321'::DECIMAL(5,5) + 10000)::VARCHAR,
        ('0.5432154321'::DECIMAL(10,10) + 10000)::VARCHAR,
        ('0.543215432154321'::DECIMAL(15,15) + 10000::DECIMAL(20,15))::VARCHAR,
        ('0.54321543215432154321'::DECIMAL(20,20) + 10000)::VARCHAR,
        ('0.5432154321543215432154321'::DECIMAL(25,25) + 10000)::VARCHAR;

+----------------------------+--------------------------------+-------------------------------------+------------------------------------------+-----------------------------------------------+----------------------------------------------------+
| Utf8("0.5") + Int64(10000) | Utf8("0.54321") + Int64(10000) | Utf8("0.5432154321") + Int64(10000) | Utf8("0.543215432154321") + Int64(10000) | Utf8("0.54321543215432154321") + Int64(10000) | Utf8("0.5432154321543215432154321") + Int64(10000) |
+----------------------------+--------------------------------+-------------------------------------+------------------------------------------+-----------------------------------------------+----------------------------------------------------+
| 10000.5                    | 10000.54321                    | 10000.5432154321                    | 10000.543215432154321                    | 10000.54321543215432154321                    | 10000.5432154321543215432154321                    |
+----------------------------+--------------------------------+-------------------------------------+------------------------------------------+-----------------------------------------------+----------------------------------------------------+

-- out of range
SELECT ('0.54321543215432154321543215432154321'::DECIMAL(35,35) + 10000)::VARCHAR;

Error: 3001(EngineExecuteQuery), Compute error: Overflow happened on: 10000 * 100000000000000000000000000000000000

-- different types
SELECT '0.5'::DECIMAL(1,1) + 1::TINYINT,
        '0.5'::DECIMAL(1,1) + 2::SMALLINT,
        '0.5'::DECIMAL(1,1) + 3::INTEGER,
        '0.5'::DECIMAL(1,1) + 4::BIGINT;

+------------------------+------------------------+------------------------+------------------------+
| Utf8("0.5") + Int64(1) | Utf8("0.5") + Int64(2) | Utf8("0.5") + Int64(3) | Utf8("0.5") + Int64(4) |
+------------------------+------------------------+------------------------+------------------------+
| 1.5                    | 2.5                    | 3.5                    | 4.5                    |
+------------------------+------------------------+------------------------+------------------------+

-- negative numbers
SELECT '0.5'::DECIMAL(1,1) + -1::TINYINT,
        '0.5'::DECIMAL(1,1) + -2::SMALLINT,
        '0.5'::DECIMAL(1,1) + -3::INTEGER,
        '0.5'::DECIMAL(1,1) + -4::BIGINT;

+----------------------------+----------------------------+----------------------------+----------------------------+
| Utf8("0.5") + (- Int64(1)) | Utf8("0.5") + (- Int64(2)) | Utf8("0.5") + (- Int64(3)) | Utf8("0.5") + (- Int64(4)) |
+----------------------------+----------------------------+----------------------------+----------------------------+
| -0.5                       | -1.5                       | -2.5                       | -3.5                       |
+----------------------------+----------------------------+----------------------------+----------------------------+

-- subtract
SELECT '0.5'::DECIMAL(1,1) - 1::TINYINT,
        '0.5'::DECIMAL(1,1) - 2::SMALLINT,
        '0.5'::DECIMAL(1,1) - 3::INTEGER,
        '0.5'::DECIMAL(1,1) - 4::BIGINT;

+------------------------+------------------------+------------------------+------------------------+
| Utf8("0.5") - Int64(1) | Utf8("0.5") - Int64(2) | Utf8("0.5") - Int64(3) | Utf8("0.5") - Int64(4) |
+------------------------+------------------------+------------------------+------------------------+
| -0.5                   | -1.5                   | -2.5                   | -3.5                   |
+------------------------+------------------------+------------------------+------------------------+

-- negative numbers
SELECT '0.5'::DECIMAL(1,1) - -1::TINYINT,
        '0.5'::DECIMAL(1,1) - -2::SMALLINT,
        '0.5'::DECIMAL(1,1) - -3::INTEGER,
        '0.5'::DECIMAL(1,1) - -4::BIGINT;

+----------------------------+----------------------------+----------------------------+----------------------------+
| Utf8("0.5") - (- Int64(1)) | Utf8("0.5") - (- Int64(2)) | Utf8("0.5") - (- Int64(3)) | Utf8("0.5") - (- Int64(4)) |
+----------------------------+----------------------------+----------------------------+----------------------------+
| 1.5                        | 2.5                        | 3.5                        | 4.5                        |
+----------------------------+----------------------------+----------------------------+----------------------------+

-- now with a table
CREATE TABLE decimals(d DECIMAL(3, 2), ts timestamp time index);

Affected Rows: 0

INSERT INTO decimals VALUES ('0.1',1000), ('0.2',1000);

Affected Rows: 2

SELECT * FROM decimals;

+------+---------------------+
| d    | ts                  |
+------+---------------------+
| 0.20 | 1970-01-01T00:00:01 |
+------+---------------------+

SELECT d + 10000 FROM decimals;

+---------------------------+
| decimals.d + Int64(10000) |
+---------------------------+
| 10000.20                  |
+---------------------------+

SELECT d + '0.1'::DECIMAL, d + 10000 FROM decimals;

+--------------------------+---------------------------+
| decimals.d + Utf8("0.1") | decimals.d + Int64(10000) |
+--------------------------+---------------------------+
| 0.3000000000             | 10000.20                  |
+--------------------------+---------------------------+

DROP TABLE decimals;

Affected Rows: 0

-- multiplication
SELECT '0.1'::DECIMAL * '10.0'::DECIMAL;

+----------------------------+
| Utf8("0.1") * Utf8("10.0") |
+----------------------------+
| 1.00000000000000000000     |
+----------------------------+

SELECT arrow_typeof('0.1'::DECIMAL(2,1) * '10.0'::DECIMAL(3,1));

+------------------------------------------+
| arrow_typeof(Utf8("0.1") * Utf8("10.0")) |
+------------------------------------------+
| Decimal128(6, 2)                         |
+------------------------------------------+

SELECT '0.1'::DECIMAL * '0.1'::DECIMAL;

+---------------------------+
| Utf8("0.1") * Utf8("0.1") |
+---------------------------+
| 0.01000000000000000000    |
+---------------------------+

-- multiplication with non-decimal
SELECT '0.1'::DECIMAL * 10::INTEGER;

+-------------------------+
| Utf8("0.1") * Int64(10) |
+-------------------------+
| 1.0000000000            |
+-------------------------+

SELECT '5.0'::DECIMAL(4,3) * '5.0'::DECIMAL(4,3);

+---------------------------+
| Utf8("5.0") * Utf8("5.0") |
+---------------------------+
| 25.000000                 |
+---------------------------+

-- negative multiplication
SELECT '-5.0'::DECIMAL(4,3) * '5.0'::DECIMAL(4,3);

+----------------------------+
| Utf8("-5.0") * Utf8("5.0") |
+----------------------------+
| -25.000000                 |
+----------------------------+

-- no precision is lost
SELECT ('18.25'::DECIMAL(4,2) * '17.25'::DECIMAL(4,2))::VARCHAR;

+-------------------------------+
| Utf8("18.25") * Utf8("17.25") |
+-------------------------------+
| 314.8125                      |
+-------------------------------+

-- different types
SELECT '0.001'::DECIMAL * 100::TINYINT,
        '0.001'::DECIMAL * 10000::SMALLINT,
        '0.001'::DECIMAL * 1000000::INTEGER,
        '0.001'::DECIMAL * 100000000::BIGINT;

+----------------------------+------------------------------+--------------------------------+----------------------------------+
| Utf8("0.001") * Int64(100) | Utf8("0.001") * Int64(10000) | Utf8("0.001") * Int64(1000000) | Utf8("0.001") * Int64(100000000) |
+----------------------------+------------------------------+--------------------------------+----------------------------------+
| 0.1000000000               | 10.0000000000                | 1000.0000000000                | 100000.0000000000                |
+----------------------------+------------------------------+--------------------------------+----------------------------------+

-- multiplication could not be performed exactly: throw error
SELECT '0.000000000000000000000000000001'::DECIMAL(38,30) * '0.000000000000000000000000000001'::DECIMAL(38,30);

Error: 3000(PlanQuery), Failed to plan SQL: Error during planning: Cannot get result type for decimal operation Decimal128(38, 30) * Decimal128(38, 30): Invalid argument error: Output scale of Decimal128(38, 30) * Decimal128(38, 30) would exceed max scale of 38

-- test addition, subtraction and multiplication with various scales and precisions
SELECT 2.0 + 1.0 as col1,
       2.0000 + 1.0000 as col2,
       2.000000000000 + 1.000000000000 as col3,
       2.00000000000000000000 + 1.00000000000000000000 as col4;

+------+------+------+------+
| col1 | col2 | col3 | col4 |
+------+------+------+------+
| 3.0  | 3.0  | 3.0  | 3.0  |
+------+------+------+------+

SELECT 2.0 - 1.0 as col1,
       2.0000 - 1.0000 as col2,
       2.000000000000 - 1.000000000000 as col3,
       2.00000000000000000000 - 1.00000000000000000000 as col4;

+------+------+------+------+
| col1 | col2 | col3 | col4 |
+------+------+------+------+
| 1.0  | 1.0  | 1.0  | 1.0  |
+------+------+------+------+

SELECT 2.0 * 1.0 as col1,
       2.0000 * 1.0000 as col2;

+------+------+
| col1 | col2 |
+------+------+
| 2.0  | 2.0  |
+------+------+

