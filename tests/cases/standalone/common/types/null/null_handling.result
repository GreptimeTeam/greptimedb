-- Migrated from DuckDB test: test/sql/types/null/test_null.test
-- Test NULL value handling across different contexts
-- Test NULL in basic operations
CREATE TABLE null_test(i INTEGER, s VARCHAR, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO null_test VALUES
    (1, 'hello', 1000),
    (NULL, 'world', 2000),
    (3, NULL, 3000),
    (NULL, NULL, 4000);

Affected Rows: 4

-- Test NULL comparisons
SELECT i, s FROM null_test WHERE i IS NULL ORDER BY ts;

+---+-------+
| i | s     |
+---+-------+
|   | world |
|   |       |
+---+-------+

SELECT i, s FROM null_test WHERE i IS NOT NULL ORDER BY ts;

+---+-------+
| i | s     |
+---+-------+
| 1 | hello |
| 3 |       |
+---+-------+

SELECT i, s FROM null_test WHERE s IS NULL ORDER BY ts;

+---+---+
| i | s |
+---+---+
| 3 |   |
|   |   |
+---+---+

SELECT i, s FROM null_test WHERE s IS NOT NULL ORDER BY ts;

+---+-------+
| i | s     |
+---+-------+
| 1 | hello |
|   | world |
+---+-------+

-- Test NULL in arithmetic
SELECT i, i + 1, i * 2, i - 5 FROM null_test ORDER BY ts;

+---+------------------------+------------------------+------------------------+
| i | null_test.i + Int64(1) | null_test.i * Int64(2) | null_test.i - Int64(5) |
+---+------------------------+------------------------+------------------------+
| 1 | 2                      | 2                      | -4                     |
|   |                        |                        |                        |
| 3 | 4                      | 6                      | -2                     |
|   |                        |                        |                        |
+---+------------------------+------------------------+------------------------+

-- Test NULL in string operations
SELECT s, CONCAT(s, ' test'), UPPER(s), LENGTH(s) FROM null_test ORDER BY ts;

+-------+-----------------------------------+--------------------+---------------------+
| s     | concat(null_test.s,Utf8(" test")) | upper(null_test.s) | length(null_test.s) |
+-------+-----------------------------------+--------------------+---------------------+
| hello | hello test                        | HELLO              | 5                   |
| world | world test                        | WORLD              | 5                   |
|       |  test                             |                    |                     |
|       |  test                             |                    |                     |
+-------+-----------------------------------+--------------------+---------------------+

-- Test NULL with COALESCE
SELECT i, s, COALESCE(i, -1), COALESCE(s, 'missing') FROM null_test ORDER BY ts;

+---+-------+---------------------------------+---------------------------------------+
| i | s     | coalesce(null_test.i,Int64(-1)) | coalesce(null_test.s,Utf8("missing")) |
+---+-------+---------------------------------+---------------------------------------+
| 1 | hello | 1                               | hello                                 |
|   | world | -1                              | world                                 |
| 3 |       | 3                               | missing                               |
|   |       | -1                              | missing                               |
+---+-------+---------------------------------+---------------------------------------+

-- Test NULL in aggregates
SELECT COUNT(*), COUNT(i), COUNT(s) FROM null_test;

+----------+--------------------+--------------------+
| count(*) | count(null_test.i) | count(null_test.s) |
+----------+--------------------+--------------------+
| 4        | 2                  | 2                  |
+----------+--------------------+--------------------+

SELECT SUM(i), AVG(i), MAX(i), MIN(i) FROM null_test;

+------------------+------------------+------------------+------------------+
| sum(null_test.i) | avg(null_test.i) | max(null_test.i) | min(null_test.i) |
+------------------+------------------+------------------+------------------+
| 4                | 2.0              | 3                | 1                |
+------------------+------------------+------------------+------------------+

-- Test NULL in CASE expressions
SELECT i, s,
    CASE
        WHEN i IS NULL THEN 'no number'
        WHEN i > 2 THEN 'big number'
        ELSE 'small number'
    END as category
FROM null_test ORDER BY ts;

+---+-------+--------------+
| i | s     | category     |
+---+-------+--------------+
| 1 | hello | small number |
|   | world | no number    |
| 3 |       | big number   |
|   |       | no number    |
+---+-------+--------------+

-- Test NULL in GROUP BY
SELECT i, COUNT(*) FROM null_test GROUP BY i ORDER BY i;

+---+----------+
| i | count(*) |
+---+----------+
| 1 | 1        |
| 3 | 1        |
|   | 2        |
+---+----------+

SELECT s, COUNT(*) FROM null_test GROUP BY s ORDER BY s;

+-------+----------+
| s     | count(*) |
+-------+----------+
| hello | 1        |
| world | 1        |
|       | 2        |
+-------+----------+

-- Test NULLIF function
SELECT i, NULLIF(i, 1) FROM null_test ORDER BY ts;

+---+------------------------------+
| i | nullif(null_test.i,Int64(1)) |
+---+------------------------------+
| 1 |                              |
|   |                              |
| 3 | 3                            |
|   |                              |
+---+------------------------------+

SELECT s, NULLIF(s, 'hello') FROM null_test ORDER BY ts;

+-------+-----------------------------------+
| s     | nullif(null_test.s,Utf8("hello")) |
+-------+-----------------------------------+
| hello |                                   |
| world | world                             |
|       |                                   |
|       |                                   |
+-------+-----------------------------------+

DROP TABLE null_test;

Affected Rows: 0

