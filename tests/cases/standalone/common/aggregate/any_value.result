-- Migrated from DuckDB test: test/sql/aggregate/aggregates/test_any_value.test
-- Test the ANY_VALUE function
-- Test with NULL values
CREATE TABLE tbl(i INTEGER, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO tbl VALUES (NULL, 1000), (2, 2000), (3, 3000);

Affected Rows: 3

-- Note: first_value returns first value including NULL, while ANY_VALUE skips NULLs
-- Using first_value as closest available alternative
SELECT first_value(i) AS a FROM tbl;

+---+
| a |
+---+
|   |
+---+

DROP TABLE tbl;

Affected Rows: 0

-- Test with integers
CREATE TABLE five(i INTEGER, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO five VALUES (1, 1000), (2, 2000), (3, 3000), (4, 4000), (5, 5000);

Affected Rows: 5

SELECT first_value(i) FROM five;

+---------------------+
| first_value(five.i) |
+---------------------+
| 1                   |
+---------------------+

SELECT i % 3 AS g, first_value(i) FROM five GROUP BY g ORDER BY g;

+---+---------------------+
| g | first_value(five.i) |
+---+---------------------+
| 0 | 3                   |
| 1 | 1                   |
| 2 | 2                   |
+---+---------------------+

-- Test with ORDER BY
SELECT first_value(i ORDER BY i DESC) FROM five;

+--------------------------------------------------------+
| first_value(five.i) ORDER BY [five.i DESC NULLS FIRST] |
+--------------------------------------------------------+
| 5                                                      |
+--------------------------------------------------------+

SELECT i % 3 AS g, first_value(i ORDER BY i DESC) FROM five GROUP BY g ORDER BY g;

+---+--------------------------------------------------------+
| g | first_value(five.i) ORDER BY [five.i DESC NULLS FIRST] |
+---+--------------------------------------------------------+
| 0 | 3                                                      |
| 1 | 4                                                      |
| 2 | 5                                                      |
+---+--------------------------------------------------------+

-- Test with doubles
CREATE TABLE doubles(d DOUBLE, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO doubles VALUES (1.5, 1000), (2.5, 2000), (3.5, 3000), (4.5, 4000), (5.5, 5000);

Affected Rows: 5

SELECT first_value(d) FROM doubles;

+------------------------+
| first_value(doubles.d) |
+------------------------+
| 1.5                    |
+------------------------+

SELECT CAST(d AS INTEGER) % 3 AS g, first_value(d) FROM doubles GROUP BY g ORDER BY g;

+---+------------------------+
| g | first_value(doubles.d) |
+---+------------------------+
| 0 | 3.5                    |
| 1 | 1.5                    |
| 2 | 2.5                    |
+---+------------------------+

SELECT first_value(d ORDER BY d DESC) FROM doubles;

+--------------------------------------------------------------+
| first_value(doubles.d) ORDER BY [doubles.d DESC NULLS FIRST] |
+--------------------------------------------------------------+
| 5.5                                                          |
+--------------------------------------------------------------+

-- Test with strings
CREATE TABLE strings(s VARCHAR, g INTEGER, ts TIMESTAMP TIME INDEX);

Affected Rows: 0

INSERT INTO strings VALUES ('apple', 1, 1000), ('banana', 1, 2000), ('cherry', 2, 3000), ('date', 2, 4000), ('elderberry', 3, 5000);

Affected Rows: 5

SELECT first_value(s) FROM strings;

+------------------------+
| first_value(strings.s) |
+------------------------+
| apple                  |
+------------------------+

SELECT g, first_value(s) FROM strings GROUP BY g ORDER BY g;

+---+------------------------+
| g | first_value(strings.s) |
+---+------------------------+
| 1 | apple                  |
| 2 | cherry                 |
| 3 | elderberry             |
+---+------------------------+

SELECT first_value(s ORDER BY s DESC) FROM strings;

+--------------------------------------------------------------+
| first_value(strings.s) ORDER BY [strings.s DESC NULLS FIRST] |
+--------------------------------------------------------------+
| elderberry                                                   |
+--------------------------------------------------------------+

SELECT g, first_value(s ORDER BY s DESC) FROM strings GROUP BY g ORDER BY g;

+---+--------------------------------------------------------------+
| g | first_value(strings.s) ORDER BY [strings.s DESC NULLS FIRST] |
+---+--------------------------------------------------------------+
| 1 | banana                                                       |
| 2 | date                                                         |
| 3 | elderberry                                                   |
+---+--------------------------------------------------------------+

-- Test with mixed NULL values
INSERT INTO strings VALUES (NULL, 1, 6000), ('fig', NULL, 7000), (NULL, NULL, 8000);

Affected Rows: 3

SELECT first_value(s) FROM strings;

+------------------------+
| first_value(strings.s) |
+------------------------+
| apple                  |
+------------------------+

SELECT g, first_value(s) FROM strings WHERE g IS NOT NULL GROUP BY g ORDER BY g;

+---+------------------------+
| g | first_value(strings.s) |
+---+------------------------+
| 1 | apple                  |
| 2 | cherry                 |
| 3 | elderberry             |
+---+------------------------+

-- cleanup
DROP TABLE five;

Affected Rows: 0

DROP TABLE doubles;

Affected Rows: 0

DROP TABLE strings;

Affected Rows: 0

