syntax = "proto3";

package v1metasrv;

import "proto/rpc.proto";

service MetaSrv {
  // Heartbeat, there may be many contents of the heartbeat, such as:
  // 1. Metadata to be registered to meta server and discoverable by other nodes.
  // 2. Some performance metrics, such as Load, CPU usage, etc.
  // 3. The number of computing tasks being executed.
  rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse) {}

  // Add watch key stream.
  // Whenever the watch key data updated, client will be notified accross the
  // stream.
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}

  // Fetch routing information for tables. The smallest unit is the complete
  // routing information(all regions) of a table.
  // 
  // table_1
  //    table_name
  //    regions
  //      region_1
  //        mutate_endpoint
  //        select_endpoint_1, select_endpoint_2
  //      region_2
  //        mutate_endpoint
  //        select_endpoint_1, select_endpoint_2, select_endpoint_3
  //      region_xxx
  // table_2
  //    ...
  //
  rpc Route(RouteRequest) returns (RouteResponse) {}

  // Fetch meta-srv member list endpoints.
  rpc Members(MembersRequest) returns (MembersResponse) {}
}

message HeartbeatRequest {
  v1metarpc.RequestHeader header = 1;

  bytes payload = 2;
}

message HeartbeatResponse {
  v1metarpc.ResponseHeader header = 1;

  bytes payload = 2;
}

message WatchRequest {
  v1metarpc.RequestHeader header = 1;

  string key = 2;

  enum FilterType {
    // receive all kind mutate event.
    ALL = 0;
    // filter only update event.
    UPDATE = 1;
    // filter only delete event.
    DELETE = 2;
  }
  FilterType filter_type = 3;
}

message WatchResponse {
  v1metarpc.ResponseHeader header = 1;

  Event event = 2;
}

message Event {
  string key = 1;

  // current value of the key(if any)
  SeqV current = 2;
  // prev value of the key(if any)
  SeqV prev = 3;
}

message SeqV {
  uint64 seq = 1;
  bytes raw_data = 2;
}

message RouteRequest {
  v1metarpc.RequestHeader header = 1;

  repeated string table_names = 2;
}

message RouteResponse {
  v1metarpc.ResponseHeader header = 1;

  repeated Endpoint endpoints = 2;
  repeated TableRoute table_routes = 3;
}

message Endpoint {
  string addr = 1;
}

message TableRoute {
  string table_name = 1;

  repeated RegionRoute region_routes = 2;
}

message RegionRoute {
  uint64 region_id = 1;
  string region_name = 2;

  // single node for write task
  uint64 mutate_endpoint_index = 3;
  // multiple nodes for read task
  repeated uint64 select_endpoint_indices = 4;
}

message MembersRequest {
  v1metarpc.RequestHeader header = 1;
}

message MembersResponse {
  v1metarpc.ResponseHeader header = 1;

  bytes payload = 2;
}


