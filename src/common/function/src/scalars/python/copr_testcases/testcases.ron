// This is the file for python coprocessor's testcases, 
// including coprocessor parsing test and execute test
// check src/scalars/python/test.rs for more information
[
    (
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
        "#,
        predicate: ParseIsOk(
            result: (
                name: "a",
                args: ["cpu", "mem"],
                returns: ["perf", "what", "how", "why"],
                arg_types: [
                    Some((
                        datatype: Some(Float32),
                        is_nullable: false
                    )),
                    Some((
                        datatype: Some(Float64),
                        is_nullable: false
                    )),
                ],
                return_types: [
                    Some((
                        datatype: Some(Float64),
                        is_nullable: false
                    )),
                    Some((
                        datatype: Some(Float64),
                        is_nullable: true
                    )),
                    Some((
                        datatype: None,
                        is_nullable: false
                    )),
                    Some((
                        datatype: None,
                        is_nullable: true
                    )),
                ]
            )
        )
    ),
    (
        code: r#"
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect one decorator"
        )
    ),
    (
        code: r#"
@copr(args=["cpu", 3], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect a list of String, found "
        )
    ),
    (
        code: r#"
@copr(args=42, returns=["perf", "what", "how", "why"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect a list, found Constant"
        )
    ),
    (
        // unknown type names
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[g32], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Unknown datatype:"
        )
    ),
    (
        // two type name
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f32 | f64], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect one typenames and one `None`"
        )
    ),
    (
        // two `None`
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[None | None], mem: vector[f64])->(vector[f64], vector[None|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect one typenames and one `None`"
        )
    ),
    (
        // Expect a Types name
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f64|None], mem: vector[f64])->(vector[g64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Unknown datatype:"
        )
    ),
    (
        // no more `into`
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[cast(f64)], mem: vector[f64])->(vector[f64], vector[f64|None], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect type in `vector[...]`, found "
        )
    ),
    (
        // Expect `vector` not `vec`
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vec[f64], mem: vector[f64])->(vector[f64|None], vector[f64], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Wrong type annotation, expect `vector[...]`, found"
        )
    ),
    (
        // Expect `None`
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f64|1], mem: vector[f64])->(vector[f64|None], vector[f64], vector[_], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: "Expect a type name and a `None`, found left: "
        )
    ),
    (
        // more than one statement
        code: r#"
print("hello world")
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f64], mem: vector[f64])->(vector[None|None], vector[into(f64)], vector[f64], vector[f64 | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: 
            "Expect one and only one python function with `@coprocessor` or `@cpor` decorator"
        )
    ),
    (
        // wrong decorator name
        code: r#"
@corp(args=["cpu", "mem"], returns=["perf", "what", "how", "why"])
def a(cpu: vector[f64], mem: vector[f64])->(vector[None|None], vector[into(f64)], vector[f64], vector[f64 | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: 
            "Expect decorator with name `copr` or `coprocessor`, found"
        )
    ),
    (
        // wrong decorator name
        code: r#"
@copr(args=["cpu", "mem"])
def a(cpu: vector[f64], mem: vector[f64])->(vector[f64|None], vector[into(f64)], vector[f64], vector[f64 | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem
"#,
        predicate: ParseIsErr(
            reason: 
            " keyword argument, found "
        )
    ),
    (
        // exec_coprocessor
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, cpu - mem
"#,
        predicate: ExecIsOk(
            fields: [
                (
                    datatype: Some(Float64),
                    is_nullable: true
                ),
                (
                    datatype: Some(Float32),
                    is_nullable: false
                ),
            ],
            columns: [
                (
                    ty: Float64,
                    len: 4
                ),
                (
                    ty: Float32,
                    len: 4
                )
            ]
        )
    ),
    (
        // constant column(float)
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, 1.0
"#,
        predicate: ExecIsOk(
            fields: [
                (
                    datatype: Some(Float64),
                    is_nullable: true
                ),
                (
                    datatype: Some(Float32),
                    is_nullable: false
                ),
            ],
            columns: [
                (
                    ty: Float64,
                    len: 4
                ),
                (
                    ty: Float32,
                    len: 4
                )
            ]
        )
    ),
    (
        // constant column(int)
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, 1
"#,
        predicate: ExecIsOk(
            fields: [
                (
                    datatype: Some(Float64),
                    is_nullable: true
                ),
                (
                    datatype: Some(Float32),
                    is_nullable: false
                ),
            ],
            columns: [
                (
                    ty: Float64,
                    len: 4
                ),
                (
                    ty: Float32,
                    len: 4
                )
            ]
        )
    ),
    (
        // constant column(bool)
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, True
"#,
        predicate: ExecIsOk(
            fields: [
                (
                    datatype: Some(Float64),
                    is_nullable: true
                ),
                (
                    datatype: Some(Float32),
                    is_nullable: false
                ),
            ],
            columns: [
                (
                    ty: Float64,
                    len: 4
                ),
                (
                    ty: Float32,
                    len: 4
                )
            ]
        )
    ),
    (
        // expect 4 vector ,found 5
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what", "how", "why", "whatever", "nihilism"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], vector[f64], vector[f64], vector[f64 | None], vector[bool], vector[_ | None]):
    return cpu + mem, cpu - mem, cpu * mem, cpu / mem, cpu
"#,
        predicate: ExecIsErr(
            reason: "The number of return Vector is wrong, expect"
        )
    ),
    (
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, cpu - mem*(1/0)
"#,
        predicate: ExecIsErr(
            reason: "ZeroDivisionError: division by zero"
        )
    ),
    (
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->(vector[f64|None], 
    vector[f32]):
    return cpu + mem, cpu - mem***
"#,
        predicate: ParseIsErr(
            reason: "invalid syntax. Got unexpected token "
        )
    ),
    (
        code: r#"
@copr(args=["cpu", "mem"], returns=["perf", "what"])
def a(cpu: vector[f32], mem: vector[f64])->f32:
    return cpu + mem, cpu - mem
"#,
        predicate: ParseIsErr(
            reason: "Expect `(vector[...], vector[...], ...)` or `vector[...]`, found "
        )
    )
]