# Node running mode, see `standalone.example.toml`.
mode = "distributed"
# The default timezone of the server
# default_timezone = "UTC"

[heartbeat]
# Interval for sending heartbeat task to the Metasrv, 5 seconds by default.
interval = "5s"
# Interval for retry sending heartbeat task, 5 seconds by default.
retry_interval = "5s"

# HTTP server options, see `standalone.example.toml`.
[http]
addr = "127.0.0.1:4000"
timeout = "30s"
body_limit = "64MB"

# gRPC server options, see `standalone.example.toml`.
[grpc]
addr = "127.0.0.1:4001"
runtime_size = 8

# MySQL server options, see `standalone.example.toml`.
[mysql]
enable = true
addr = "127.0.0.1:4002"
runtime_size = 2

# MySQL server TLS options, see `standalone.example.toml`.
[mysql.tls]
mode = "disable"
cert_path = ""
key_path = ""

# PostgresSQL server options, see `standalone.example.toml`.
[postgres]
enable = true
addr = "127.0.0.1:4003"
runtime_size = 2

# PostgresSQL server TLS options, see `standalone.example.toml`.
[postgres.tls]
mode = "disable"
cert_path = ""
key_path = ""

# OpenTSDB protocol options, see `standalone.example.toml`.
[opentsdb]
enable = true
addr = "127.0.0.1:4242"
runtime_size = 2

# InfluxDB protocol options, see `standalone.example.toml`.
[influxdb]
enable = true

# Prometheus remote storage options, see `standalone.example.toml`.
[prom_store]
enable = true
# Whether to store the data from Prometheus remote write in metric engine.
# true by default
with_metric_engine = true

# Metasrv client options, see `datanode.example.toml`.
[meta_client]
metasrv_addrs = ["127.0.0.1:3002"]
timeout = "3s"
# DDL timeouts options.
ddl_timeout = "10s"
connect_timeout = "1s"
tcp_nodelay = true
# The configuration about the cache of the Metadata.
# default: 100000
metadata_cache_max_capacity = 100000
# default: 10m
metadata_cache_ttl = "10m"
# default: 5m
metadata_cache_tti = "5m"

# Log options, see `standalone.example.toml`
# [logging]
# dir = "/tmp/greptimedb/logs"
# level = "info"

# Datanode options.
[datanode]
# Datanode client options.
[datanode.client]
timeout = "10s"
connect_timeout = "10s"
tcp_nodelay = true

# Frontend export the metrics generated by itself
# encoded to Prometheus remote-write format
# and send to Prometheus remote-write compatible receiver (e.g. send to `greptimedb` itself)
# This is only used for `greptimedb` to export its own metrics internally. It's different from prometheus scrape.
# [export_metrics]
# whether enable export metrics, default is false
# enable = false
# The interval of export metrics
# write_interval = "30s"
# for `frontend`, `self_import` is recommend to collect metrics generated by itself
# [export_metrics.self_import]
# db = "information_schema"
